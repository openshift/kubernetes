// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"os"
	"sort"
	"strings"

	openshiftapi "github.com/openshift/api"
	apiextentions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/install"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/klog/v2"
	flowcontrol "k8s.io/kubernetes/pkg/apis/flowcontrol/install"
	netowrking "k8s.io/kubernetes/pkg/apis/networking/install"
)

func main() {
	t, err := template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package deprecatedapirequest

import "k8s.io/apimachinery/pkg/runtime/schema"

var deprecatedApiRemovedRelease = map[schema.GroupVersionResource]string{
{{- range . }}
	{Group: "{{ printf "%s" .Group }}", Version: "{{ printf "%s" .Version }}", Resource: "{{ printf "%s" .Resource }}"}: "{{ .RemovedRelease }}",
{{- end }}
}
`)
	if err != nil {
		klog.Error(err)
		os.Exit(1)
	}

	// install types
	scheme := runtime.NewScheme()
	openshiftapi.Install(scheme)
	openshiftapi.InstallKube(scheme)
	apiextentions.Install(scheme)
	flowcontrol.Install(scheme)
	netowrking.Install(scheme)

	var data DeprecatedAPIInfos

	// find types with APILifecycleRemoved() methods
	for gvk, _ := range scheme.AllKnownTypes() {
		obj, err := scheme.New(gvk)
		if err != nil {
			klog.Error(err)
			os.Exit(1)
		}
		deprecatedObj, ok := obj.(interface{ APILifecycleRemoved() (int, int) })
		if !ok {
			continue
		}
		major, minor := deprecatedObj.APILifecycleRemoved()
		gvr := gvkToGVR(gvk)
		data = append(data, DeprecatedAPIInfo{
			Group:          gvr.Group,
			Version:        gvr.Version,
			Resource:       gvr.Resource,
			RemovedRelease: fmt.Sprintf("%d.%d", major, minor),
		})
	}

	// generate into buffer
	sort.Sort(data)
	buf := new(bytes.Buffer)
	err = t.Execute(buf, data)
	if err != nil {
		klog.Error(err)
		os.Exit(1)
	}

	// apply gofmt
	fmt, err := format.Source(buf.Bytes())
	if err != nil {
		klog.Error(err)
		os.Exit(1)
	}

	// write output file
	f, err := os.Create("deprecated_map.go")
	if err != nil {
		klog.Errorf("Error creating output file: %s", err)
	}
	defer f.Close()
	f.Write(fmt)
}

func gvkToGVR(kind schema.GroupVersionKind) schema.GroupVersionResource {
	// TODO do this properly
	gvr := schema.GroupVersionResource{
		Group:    kind.Group,
		Version:  kind.Version,
		Resource: strings.ToLower(kind.Kind),
	}
	switch {
	case gvr.Resource == "ingress":
		gvr.Resource = "ingresses"
	case !strings.HasSuffix(gvr.Resource, "list"):
		gvr.Resource = gvr.Resource + "s"
	}
	return gvr
}

type DeprecatedAPIInfo struct {
	Group          string
	Version        string
	Resource       string
	RemovedRelease string
}

type DeprecatedAPIInfos []DeprecatedAPIInfo

func (a DeprecatedAPIInfos) Len() int { return len(a) }
func (a DeprecatedAPIInfos) Less(i, j int) bool {
	switch {
	case a[i].Group != a[j].Group:
		return a[i].Group < a[j].Group
	case a[i].Version != a[j].Version:
		return a[i].Version < a[j].Version
	}
	return a[i].Resource < a[j].Resource
}
func (a DeprecatedAPIInfos) Swap(i, j int) { a[i], a[j] = a[j], a[i] }
