// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1beta3

import (
	api "k8s.io/kubernetes/pkg/api"
	resource "k8s.io/kubernetes/pkg/api/resource"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	conversion "k8s.io/kubernetes/pkg/conversion"
	runtime "k8s.io/kubernetes/pkg/runtime"
)

func init() {
	if err := api.Scheme.AddGeneratedConversionFuncs(
		Convert_v1beta3_AWSElasticBlockStoreVolumeSource_To_api_AWSElasticBlockStoreVolumeSource,
		Convert_api_AWSElasticBlockStoreVolumeSource_To_v1beta3_AWSElasticBlockStoreVolumeSource,
		Convert_v1beta3_Binding_To_api_Binding,
		Convert_v1beta3_Capabilities_To_api_Capabilities,
		Convert_api_Capabilities_To_v1beta3_Capabilities,
		Convert_v1beta3_CephFSVolumeSource_To_api_CephFSVolumeSource,
		Convert_v1beta3_CinderVolumeSource_To_api_CinderVolumeSource,
		Convert_api_CinderVolumeSource_To_v1beta3_CinderVolumeSource,
		Convert_v1beta3_ComponentCondition_To_api_ComponentCondition,
		Convert_api_ComponentCondition_To_v1beta3_ComponentCondition,
		Convert_v1beta3_ComponentStatus_To_api_ComponentStatus,
		Convert_v1beta3_ComponentStatusList_To_api_ComponentStatusList,
		Convert_v1beta3_Container_To_api_Container,
		Convert_api_Container_To_v1beta3_Container,
		Convert_v1beta3_ContainerPort_To_api_ContainerPort,
		Convert_api_ContainerPort_To_v1beta3_ContainerPort,
		Convert_v1beta3_ContainerState_To_api_ContainerState,
		Convert_api_ContainerState_To_v1beta3_ContainerState,
		Convert_v1beta3_ContainerStateRunning_To_api_ContainerStateRunning,
		Convert_api_ContainerStateRunning_To_v1beta3_ContainerStateRunning,
		Convert_v1beta3_ContainerStateTerminated_To_api_ContainerStateTerminated,
		Convert_api_ContainerStateTerminated_To_v1beta3_ContainerStateTerminated,
		Convert_v1beta3_ContainerStateWaiting_To_api_ContainerStateWaiting,
		Convert_api_ContainerStateWaiting_To_v1beta3_ContainerStateWaiting,
		Convert_v1beta3_ContainerStatus_To_api_ContainerStatus,
		Convert_api_ContainerStatus_To_v1beta3_ContainerStatus,
		Convert_v1beta3_DaemonEndpoint_To_api_DaemonEndpoint,
		Convert_api_DaemonEndpoint_To_v1beta3_DaemonEndpoint,
		Convert_v1beta3_DeleteOptions_To_api_DeleteOptions,
		Convert_v1beta3_EmptyDirVolumeSource_To_api_EmptyDirVolumeSource,
		Convert_api_EmptyDirVolumeSource_To_v1beta3_EmptyDirVolumeSource,
		Convert_v1beta3_EndpointAddress_To_api_EndpointAddress,
		Convert_v1beta3_EndpointPort_To_api_EndpointPort,
		Convert_api_EndpointPort_To_v1beta3_EndpointPort,
		Convert_v1beta3_EndpointSubset_To_api_EndpointSubset,
		Convert_v1beta3_Endpoints_To_api_Endpoints,
		Convert_v1beta3_EndpointsList_To_api_EndpointsList,
		Convert_v1beta3_EnvVar_To_api_EnvVar,
		Convert_v1beta3_EnvVarSource_To_api_EnvVarSource,
		Convert_v1beta3_Event_To_api_Event,
		Convert_v1beta3_EventList_To_api_EventList,
		Convert_v1beta3_EventSource_To_api_EventSource,
		Convert_api_EventSource_To_v1beta3_EventSource,
		Convert_v1beta3_ExecAction_To_api_ExecAction,
		Convert_api_ExecAction_To_v1beta3_ExecAction,
		Convert_v1beta3_FCVolumeSource_To_api_FCVolumeSource,
		Convert_api_FCVolumeSource_To_v1beta3_FCVolumeSource,
		Convert_v1beta3_FSGroupStrategyOptions_To_api_FSGroupStrategyOptions,
		Convert_api_FSGroupStrategyOptions_To_v1beta3_FSGroupStrategyOptions,
		Convert_v1beta3_FlockerVolumeSource_To_api_FlockerVolumeSource,
		Convert_api_FlockerVolumeSource_To_v1beta3_FlockerVolumeSource,
		Convert_v1beta3_GCEPersistentDiskVolumeSource_To_api_GCEPersistentDiskVolumeSource,
		Convert_api_GCEPersistentDiskVolumeSource_To_v1beta3_GCEPersistentDiskVolumeSource,
		Convert_v1beta3_GitRepoVolumeSource_To_api_GitRepoVolumeSource,
		Convert_v1beta3_GlusterfsVolumeSource_To_api_GlusterfsVolumeSource,
		Convert_api_GlusterfsVolumeSource_To_v1beta3_GlusterfsVolumeSource,
		Convert_v1beta3_HTTPGetAction_To_api_HTTPGetAction,
		Convert_v1beta3_Handler_To_api_Handler,
		Convert_v1beta3_HostPathVolumeSource_To_api_HostPathVolumeSource,
		Convert_api_HostPathVolumeSource_To_v1beta3_HostPathVolumeSource,
		Convert_v1beta3_IDRange_To_api_IDRange,
		Convert_api_IDRange_To_v1beta3_IDRange,
		Convert_v1beta3_ISCSIVolumeSource_To_api_ISCSIVolumeSource,
		Convert_v1beta3_Lifecycle_To_api_Lifecycle,
		Convert_v1beta3_LimitRange_To_api_LimitRange,
		Convert_v1beta3_LimitRangeItem_To_api_LimitRangeItem,
		Convert_api_LimitRangeItem_To_v1beta3_LimitRangeItem,
		Convert_v1beta3_LimitRangeList_To_api_LimitRangeList,
		Convert_v1beta3_LimitRangeSpec_To_api_LimitRangeSpec,
		Convert_api_LimitRangeSpec_To_v1beta3_LimitRangeSpec,
		Convert_v1beta3_List_To_api_List,
		Convert_api_List_To_v1beta3_List,
		Convert_v1beta3_ListMeta_To_unversioned_ListMeta,
		Convert_unversioned_ListMeta_To_v1beta3_ListMeta,
		Convert_v1beta3_ListOptions_To_api_ListOptions,
		Convert_v1beta3_LoadBalancerIngress_To_api_LoadBalancerIngress,
		Convert_api_LoadBalancerIngress_To_v1beta3_LoadBalancerIngress,
		Convert_v1beta3_LoadBalancerStatus_To_api_LoadBalancerStatus,
		Convert_api_LoadBalancerStatus_To_v1beta3_LoadBalancerStatus,
		Convert_v1beta3_LocalObjectReference_To_api_LocalObjectReference,
		Convert_api_LocalObjectReference_To_v1beta3_LocalObjectReference,
		Convert_v1beta3_NFSVolumeSource_To_api_NFSVolumeSource,
		Convert_api_NFSVolumeSource_To_v1beta3_NFSVolumeSource,
		Convert_v1beta3_Namespace_To_api_Namespace,
		Convert_v1beta3_NamespaceList_To_api_NamespaceList,
		Convert_v1beta3_NamespaceSpec_To_api_NamespaceSpec,
		Convert_api_NamespaceSpec_To_v1beta3_NamespaceSpec,
		Convert_v1beta3_NamespaceStatus_To_api_NamespaceStatus,
		Convert_api_NamespaceStatus_To_v1beta3_NamespaceStatus,
		Convert_v1beta3_NodeAddress_To_api_NodeAddress,
		Convert_api_NodeAddress_To_v1beta3_NodeAddress,
		Convert_v1beta3_NodeCondition_To_api_NodeCondition,
		Convert_api_NodeCondition_To_v1beta3_NodeCondition,
		Convert_v1beta3_NodeDaemonEndpoints_To_api_NodeDaemonEndpoints,
		Convert_api_NodeDaemonEndpoints_To_v1beta3_NodeDaemonEndpoints,
		Convert_v1beta3_NodeSpec_To_api_NodeSpec,
		Convert_api_NodeSpec_To_v1beta3_NodeSpec,
		Convert_v1beta3_ObjectFieldSelector_To_api_ObjectFieldSelector,
		Convert_api_ObjectFieldSelector_To_v1beta3_ObjectFieldSelector,
		Convert_v1beta3_ObjectMeta_To_api_ObjectMeta,
		Convert_v1beta3_ObjectReference_To_api_ObjectReference,
		Convert_api_ObjectReference_To_v1beta3_ObjectReference,
		Convert_v1beta3_PersistentVolume_To_api_PersistentVolume,
		Convert_v1beta3_PersistentVolumeClaim_To_api_PersistentVolumeClaim,
		Convert_v1beta3_PersistentVolumeClaimList_To_api_PersistentVolumeClaimList,
		Convert_v1beta3_PersistentVolumeClaimSpec_To_api_PersistentVolumeClaimSpec,
		Convert_v1beta3_PersistentVolumeClaimStatus_To_api_PersistentVolumeClaimStatus,
		Convert_api_PersistentVolumeClaimStatus_To_v1beta3_PersistentVolumeClaimStatus,
		Convert_v1beta3_PersistentVolumeClaimVolumeSource_To_api_PersistentVolumeClaimVolumeSource,
		Convert_api_PersistentVolumeClaimVolumeSource_To_v1beta3_PersistentVolumeClaimVolumeSource,
		Convert_v1beta3_PersistentVolumeList_To_api_PersistentVolumeList,
		Convert_v1beta3_PersistentVolumeSource_To_api_PersistentVolumeSource,
		Convert_v1beta3_PersistentVolumeSpec_To_api_PersistentVolumeSpec,
		Convert_v1beta3_PersistentVolumeStatus_To_api_PersistentVolumeStatus,
		Convert_api_PersistentVolumeStatus_To_v1beta3_PersistentVolumeStatus,
		Convert_v1beta3_Pod_To_api_Pod,
		Convert_v1beta3_PodAttachOptions_To_api_PodAttachOptions,
		Convert_api_PodAttachOptions_To_v1beta3_PodAttachOptions,
		Convert_v1beta3_PodCondition_To_api_PodCondition,
		Convert_api_PodCondition_To_v1beta3_PodCondition,
		Convert_v1beta3_PodExecOptions_To_api_PodExecOptions,
		Convert_api_PodExecOptions_To_v1beta3_PodExecOptions,
		Convert_v1beta3_PodList_To_api_PodList,
		Convert_v1beta3_PodLogOptions_To_api_PodLogOptions,
		Convert_api_PodLogOptions_To_v1beta3_PodLogOptions,
		Convert_v1beta3_PodProxyOptions_To_api_PodProxyOptions,
		Convert_api_PodProxyOptions_To_v1beta3_PodProxyOptions,
		Convert_v1beta3_PodSecurityContext_To_api_PodSecurityContext,
		Convert_api_PodSecurityContext_To_v1beta3_PodSecurityContext,
		Convert_v1beta3_PodSpec_To_api_PodSpec,
		Convert_api_PodSpec_To_v1beta3_PodSpec,
		Convert_v1beta3_PodStatus_To_api_PodStatus,
		Convert_v1beta3_PodStatusResult_To_api_PodStatusResult,
		Convert_v1beta3_PodTemplate_To_api_PodTemplate,
		Convert_v1beta3_PodTemplateList_To_api_PodTemplateList,
		Convert_v1beta3_PodTemplateSpec_To_api_PodTemplateSpec,
		Convert_v1beta3_Probe_To_api_Probe,
		Convert_v1beta3_RBDVolumeSource_To_api_RBDVolumeSource,
		Convert_api_RBDVolumeSource_To_v1beta3_RBDVolumeSource,
		Convert_v1beta3_RangeAllocation_To_api_RangeAllocation,
		Convert_v1beta3_ReplicationController_To_api_ReplicationController,
		Convert_v1beta3_ReplicationControllerList_To_api_ReplicationControllerList,
		Convert_v1beta3_ReplicationControllerSpec_To_api_ReplicationControllerSpec,
		Convert_api_ReplicationControllerSpec_To_v1beta3_ReplicationControllerSpec,
		Convert_v1beta3_ReplicationControllerStatus_To_api_ReplicationControllerStatus,
		Convert_v1beta3_ResourceQuota_To_api_ResourceQuota,
		Convert_v1beta3_ResourceQuotaList_To_api_ResourceQuotaList,
		Convert_v1beta3_ResourceQuotaSpec_To_api_ResourceQuotaSpec,
		Convert_v1beta3_ResourceQuotaStatus_To_api_ResourceQuotaStatus,
		Convert_api_ResourceQuotaStatus_To_v1beta3_ResourceQuotaStatus,
		Convert_v1beta3_ResourceRequirements_To_api_ResourceRequirements,
		Convert_api_ResourceRequirements_To_v1beta3_ResourceRequirements,
		Convert_v1beta3_RunAsUserStrategyOptions_To_api_RunAsUserStrategyOptions,
		Convert_api_RunAsUserStrategyOptions_To_v1beta3_RunAsUserStrategyOptions,
		Convert_v1beta3_SELinuxContextStrategyOptions_To_api_SELinuxContextStrategyOptions,
		Convert_api_SELinuxContextStrategyOptions_To_v1beta3_SELinuxContextStrategyOptions,
		Convert_v1beta3_SELinuxOptions_To_api_SELinuxOptions,
		Convert_api_SELinuxOptions_To_v1beta3_SELinuxOptions,
		Convert_v1beta3_Secret_To_api_Secret,
		Convert_v1beta3_SecretList_To_api_SecretList,
		Convert_v1beta3_SecretVolumeSource_To_api_SecretVolumeSource,
		Convert_v1beta3_SecurityContext_To_api_SecurityContext,
		Convert_v1beta3_SecurityContextConstraints_To_api_SecurityContextConstraints,
		Convert_api_SecurityContextConstraints_To_v1beta3_SecurityContextConstraints,
		Convert_v1beta3_SecurityContextConstraintsList_To_api_SecurityContextConstraintsList,
		Convert_api_SecurityContextConstraintsList_To_v1beta3_SecurityContextConstraintsList,
		Convert_v1beta3_SerializedReference_To_api_SerializedReference,
		Convert_api_SerializedReference_To_v1beta3_SerializedReference,
		Convert_v1beta3_Service_To_api_Service,
		Convert_v1beta3_ServiceAccount_To_api_ServiceAccount,
		Convert_v1beta3_ServiceAccountList_To_api_ServiceAccountList,
		Convert_v1beta3_ServiceList_To_api_ServiceList,
		Convert_v1beta3_ServicePort_To_api_ServicePort,
		Convert_api_ServicePort_To_v1beta3_ServicePort,
		Convert_v1beta3_ServiceSpec_To_api_ServiceSpec,
		Convert_api_ServiceSpec_To_v1beta3_ServiceSpec,
		Convert_v1beta3_ServiceStatus_To_api_ServiceStatus,
		Convert_api_ServiceStatus_To_v1beta3_ServiceStatus,
		Convert_v1beta3_SupplementalGroupsStrategyOptions_To_api_SupplementalGroupsStrategyOptions,
		Convert_api_SupplementalGroupsStrategyOptions_To_v1beta3_SupplementalGroupsStrategyOptions,
		Convert_v1beta3_TCPSocketAction_To_api_TCPSocketAction,
		Convert_api_TCPSocketAction_To_v1beta3_TCPSocketAction,
		Convert_v1beta3_TypeMeta_To_unversioned_TypeMeta,
		Convert_unversioned_TypeMeta_To_v1beta3_TypeMeta,
		Convert_v1beta3_Volume_To_api_Volume,
		Convert_api_Volume_To_v1beta3_Volume,
		Convert_v1beta3_VolumeMount_To_api_VolumeMount,
		Convert_v1beta3_VolumeSource_To_api_VolumeSource,
		Convert_api_VolumeSource_To_v1beta3_VolumeSource,
	); err != nil {
		// if one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}

func autoConvert_v1beta3_AWSElasticBlockStoreVolumeSource_To_api_AWSElasticBlockStoreVolumeSource(in *AWSElasticBlockStoreVolumeSource, out *api.AWSElasticBlockStoreVolumeSource, s conversion.Scope) error {
	out.VolumeID = in.VolumeID
	out.FSType = in.FSType
	out.Partition = int32(in.Partition)
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_AWSElasticBlockStoreVolumeSource_To_api_AWSElasticBlockStoreVolumeSource(in *AWSElasticBlockStoreVolumeSource, out *api.AWSElasticBlockStoreVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_AWSElasticBlockStoreVolumeSource_To_api_AWSElasticBlockStoreVolumeSource(in, out, s)
}

func autoConvert_api_AWSElasticBlockStoreVolumeSource_To_v1beta3_AWSElasticBlockStoreVolumeSource(in *api.AWSElasticBlockStoreVolumeSource, out *AWSElasticBlockStoreVolumeSource, s conversion.Scope) error {
	out.VolumeID = in.VolumeID
	out.FSType = in.FSType
	out.Partition = int(in.Partition)
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_AWSElasticBlockStoreVolumeSource_To_v1beta3_AWSElasticBlockStoreVolumeSource(in *api.AWSElasticBlockStoreVolumeSource, out *AWSElasticBlockStoreVolumeSource, s conversion.Scope) error {
	return autoConvert_api_AWSElasticBlockStoreVolumeSource_To_v1beta3_AWSElasticBlockStoreVolumeSource(in, out, s)
}

func autoConvert_v1beta3_Binding_To_api_Binding(in *Binding, out *api.Binding, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectReference_To_api_ObjectReference(&in.Target, &out.Target, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_Binding_To_api_Binding(in *Binding, out *api.Binding, s conversion.Scope) error {
	return autoConvert_v1beta3_Binding_To_api_Binding(in, out, s)
}

func autoConvert_v1beta3_Capabilities_To_api_Capabilities(in *Capabilities, out *api.Capabilities, s conversion.Scope) error {
	if in.Add != nil {
		in, out := &in.Add, &out.Add
		*out = make([]api.Capability, len(*in))
		for i := range *in {
			(*out)[i] = api.Capability((*in)[i])
		}
	} else {
		out.Add = nil
	}
	if in.Drop != nil {
		in, out := &in.Drop, &out.Drop
		*out = make([]api.Capability, len(*in))
		for i := range *in {
			(*out)[i] = api.Capability((*in)[i])
		}
	} else {
		out.Drop = nil
	}
	return nil
}

func Convert_v1beta3_Capabilities_To_api_Capabilities(in *Capabilities, out *api.Capabilities, s conversion.Scope) error {
	return autoConvert_v1beta3_Capabilities_To_api_Capabilities(in, out, s)
}

func autoConvert_api_Capabilities_To_v1beta3_Capabilities(in *api.Capabilities, out *Capabilities, s conversion.Scope) error {
	if in.Add != nil {
		in, out := &in.Add, &out.Add
		*out = make([]Capability, len(*in))
		for i := range *in {
			(*out)[i] = Capability((*in)[i])
		}
	} else {
		out.Add = nil
	}
	if in.Drop != nil {
		in, out := &in.Drop, &out.Drop
		*out = make([]Capability, len(*in))
		for i := range *in {
			(*out)[i] = Capability((*in)[i])
		}
	} else {
		out.Drop = nil
	}
	return nil
}

func Convert_api_Capabilities_To_v1beta3_Capabilities(in *api.Capabilities, out *Capabilities, s conversion.Scope) error {
	return autoConvert_api_Capabilities_To_v1beta3_Capabilities(in, out, s)
}

func autoConvert_v1beta3_CephFSVolumeSource_To_api_CephFSVolumeSource(in *CephFSVolumeSource, out *api.CephFSVolumeSource, s conversion.Scope) error {
	out.Monitors = in.Monitors
	out.User = in.User
	out.SecretFile = in.SecretFile
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(api.LocalObjectReference)
		if err := Convert_v1beta3_LocalObjectReference_To_api_LocalObjectReference(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.SecretRef = nil
	}
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_CephFSVolumeSource_To_api_CephFSVolumeSource(in *CephFSVolumeSource, out *api.CephFSVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_CephFSVolumeSource_To_api_CephFSVolumeSource(in, out, s)
}

func autoConvert_v1beta3_CinderVolumeSource_To_api_CinderVolumeSource(in *CinderVolumeSource, out *api.CinderVolumeSource, s conversion.Scope) error {
	out.VolumeID = in.VolumeID
	out.FSType = in.FSType
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_CinderVolumeSource_To_api_CinderVolumeSource(in *CinderVolumeSource, out *api.CinderVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_CinderVolumeSource_To_api_CinderVolumeSource(in, out, s)
}

func autoConvert_api_CinderVolumeSource_To_v1beta3_CinderVolumeSource(in *api.CinderVolumeSource, out *CinderVolumeSource, s conversion.Scope) error {
	out.VolumeID = in.VolumeID
	out.FSType = in.FSType
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_CinderVolumeSource_To_v1beta3_CinderVolumeSource(in *api.CinderVolumeSource, out *CinderVolumeSource, s conversion.Scope) error {
	return autoConvert_api_CinderVolumeSource_To_v1beta3_CinderVolumeSource(in, out, s)
}

func autoConvert_v1beta3_ComponentCondition_To_api_ComponentCondition(in *ComponentCondition, out *api.ComponentCondition, s conversion.Scope) error {
	out.Type = api.ComponentConditionType(in.Type)
	out.Status = api.ConditionStatus(in.Status)
	out.Message = in.Message
	out.Error = in.Error
	return nil
}

func Convert_v1beta3_ComponentCondition_To_api_ComponentCondition(in *ComponentCondition, out *api.ComponentCondition, s conversion.Scope) error {
	return autoConvert_v1beta3_ComponentCondition_To_api_ComponentCondition(in, out, s)
}

func autoConvert_api_ComponentCondition_To_v1beta3_ComponentCondition(in *api.ComponentCondition, out *ComponentCondition, s conversion.Scope) error {
	out.Type = ComponentConditionType(in.Type)
	out.Status = ConditionStatus(in.Status)
	out.Message = in.Message
	out.Error = in.Error
	return nil
}

func Convert_api_ComponentCondition_To_v1beta3_ComponentCondition(in *api.ComponentCondition, out *ComponentCondition, s conversion.Scope) error {
	return autoConvert_api_ComponentCondition_To_v1beta3_ComponentCondition(in, out, s)
}

func autoConvert_v1beta3_ComponentStatus_To_api_ComponentStatus(in *ComponentStatus, out *api.ComponentStatus, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]api.ComponentCondition, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_ComponentCondition_To_api_ComponentCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	return nil
}

func Convert_v1beta3_ComponentStatus_To_api_ComponentStatus(in *ComponentStatus, out *api.ComponentStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_ComponentStatus_To_api_ComponentStatus(in, out, s)
}

func autoConvert_v1beta3_ComponentStatusList_To_api_ComponentStatusList(in *ComponentStatusList, out *api.ComponentStatusList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.ComponentStatus, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_ComponentStatus_To_api_ComponentStatus(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_ComponentStatusList_To_api_ComponentStatusList(in *ComponentStatusList, out *api.ComponentStatusList, s conversion.Scope) error {
	return autoConvert_v1beta3_ComponentStatusList_To_api_ComponentStatusList(in, out, s)
}

func autoConvert_v1beta3_ContainerPort_To_api_ContainerPort(in *ContainerPort, out *api.ContainerPort, s conversion.Scope) error {
	out.Name = in.Name
	out.HostPort = int32(in.HostPort)
	out.ContainerPort = int32(in.ContainerPort)
	out.Protocol = api.Protocol(in.Protocol)
	out.HostIP = in.HostIP
	return nil
}

func Convert_v1beta3_ContainerPort_To_api_ContainerPort(in *ContainerPort, out *api.ContainerPort, s conversion.Scope) error {
	return autoConvert_v1beta3_ContainerPort_To_api_ContainerPort(in, out, s)
}

func autoConvert_api_ContainerPort_To_v1beta3_ContainerPort(in *api.ContainerPort, out *ContainerPort, s conversion.Scope) error {
	out.Name = in.Name
	out.HostPort = int(in.HostPort)
	out.ContainerPort = int(in.ContainerPort)
	out.Protocol = Protocol(in.Protocol)
	out.HostIP = in.HostIP
	return nil
}

func Convert_api_ContainerPort_To_v1beta3_ContainerPort(in *api.ContainerPort, out *ContainerPort, s conversion.Scope) error {
	return autoConvert_api_ContainerPort_To_v1beta3_ContainerPort(in, out, s)
}

func autoConvert_v1beta3_ContainerStateRunning_To_api_ContainerStateRunning(in *ContainerStateRunning, out *api.ContainerStateRunning, s conversion.Scope) error {
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.StartedAt, &out.StartedAt, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_ContainerStateRunning_To_api_ContainerStateRunning(in *ContainerStateRunning, out *api.ContainerStateRunning, s conversion.Scope) error {
	return autoConvert_v1beta3_ContainerStateRunning_To_api_ContainerStateRunning(in, out, s)
}

func autoConvert_api_ContainerStateRunning_To_v1beta3_ContainerStateRunning(in *api.ContainerStateRunning, out *ContainerStateRunning, s conversion.Scope) error {
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.StartedAt, &out.StartedAt, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_ContainerStateRunning_To_v1beta3_ContainerStateRunning(in *api.ContainerStateRunning, out *ContainerStateRunning, s conversion.Scope) error {
	return autoConvert_api_ContainerStateRunning_To_v1beta3_ContainerStateRunning(in, out, s)
}

func autoConvert_v1beta3_ContainerStateTerminated_To_api_ContainerStateTerminated(in *ContainerStateTerminated, out *api.ContainerStateTerminated, s conversion.Scope) error {
	out.ExitCode = int32(in.ExitCode)
	out.Signal = int32(in.Signal)
	out.Reason = in.Reason
	out.Message = in.Message
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.StartedAt, &out.StartedAt, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.FinishedAt, &out.FinishedAt, s); err != nil {
		return err
	}
	out.ContainerID = in.ContainerID
	return nil
}

func autoConvert_api_ContainerStateTerminated_To_v1beta3_ContainerStateTerminated(in *api.ContainerStateTerminated, out *ContainerStateTerminated, s conversion.Scope) error {
	out.ExitCode = int(in.ExitCode)
	out.Signal = int(in.Signal)
	out.Reason = in.Reason
	out.Message = in.Message
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.StartedAt, &out.StartedAt, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.FinishedAt, &out.FinishedAt, s); err != nil {
		return err
	}
	out.ContainerID = in.ContainerID
	return nil
}

func autoConvert_v1beta3_ContainerStateWaiting_To_api_ContainerStateWaiting(in *ContainerStateWaiting, out *api.ContainerStateWaiting, s conversion.Scope) error {
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

func Convert_v1beta3_ContainerStateWaiting_To_api_ContainerStateWaiting(in *ContainerStateWaiting, out *api.ContainerStateWaiting, s conversion.Scope) error {
	return autoConvert_v1beta3_ContainerStateWaiting_To_api_ContainerStateWaiting(in, out, s)
}

func autoConvert_api_ContainerStateWaiting_To_v1beta3_ContainerStateWaiting(in *api.ContainerStateWaiting, out *ContainerStateWaiting, s conversion.Scope) error {
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

func Convert_api_ContainerStateWaiting_To_v1beta3_ContainerStateWaiting(in *api.ContainerStateWaiting, out *ContainerStateWaiting, s conversion.Scope) error {
	return autoConvert_api_ContainerStateWaiting_To_v1beta3_ContainerStateWaiting(in, out, s)
}

func autoConvert_v1beta3_ContainerStatus_To_api_ContainerStatus(in *ContainerStatus, out *api.ContainerStatus, s conversion.Scope) error {
	out.Name = in.Name
	if err := Convert_v1beta3_ContainerState_To_api_ContainerState(&in.State, &out.State, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ContainerState_To_api_ContainerState(&in.LastTerminationState, &out.LastTerminationState, s); err != nil {
		return err
	}
	out.Ready = in.Ready
	out.RestartCount = int32(in.RestartCount)
	out.Image = in.Image
	out.ImageID = in.ImageID
	out.ContainerID = in.ContainerID
	return nil
}

func Convert_v1beta3_ContainerStatus_To_api_ContainerStatus(in *ContainerStatus, out *api.ContainerStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_ContainerStatus_To_api_ContainerStatus(in, out, s)
}

func autoConvert_api_ContainerStatus_To_v1beta3_ContainerStatus(in *api.ContainerStatus, out *ContainerStatus, s conversion.Scope) error {
	out.Name = in.Name
	if err := Convert_api_ContainerState_To_v1beta3_ContainerState(&in.State, &out.State, s); err != nil {
		return err
	}
	if err := Convert_api_ContainerState_To_v1beta3_ContainerState(&in.LastTerminationState, &out.LastTerminationState, s); err != nil {
		return err
	}
	out.Ready = in.Ready
	out.RestartCount = int(in.RestartCount)
	out.Image = in.Image
	out.ImageID = in.ImageID
	out.ContainerID = in.ContainerID
	return nil
}

func Convert_api_ContainerStatus_To_v1beta3_ContainerStatus(in *api.ContainerStatus, out *ContainerStatus, s conversion.Scope) error {
	return autoConvert_api_ContainerStatus_To_v1beta3_ContainerStatus(in, out, s)
}

func autoConvert_v1beta3_DaemonEndpoint_To_api_DaemonEndpoint(in *DaemonEndpoint, out *api.DaemonEndpoint, s conversion.Scope) error {
	out.Port = int32(in.Port)
	return nil
}

func Convert_v1beta3_DaemonEndpoint_To_api_DaemonEndpoint(in *DaemonEndpoint, out *api.DaemonEndpoint, s conversion.Scope) error {
	return autoConvert_v1beta3_DaemonEndpoint_To_api_DaemonEndpoint(in, out, s)
}

func autoConvert_api_DaemonEndpoint_To_v1beta3_DaemonEndpoint(in *api.DaemonEndpoint, out *DaemonEndpoint, s conversion.Scope) error {
	out.Port = int(in.Port)
	return nil
}

func Convert_api_DaemonEndpoint_To_v1beta3_DaemonEndpoint(in *api.DaemonEndpoint, out *DaemonEndpoint, s conversion.Scope) error {
	return autoConvert_api_DaemonEndpoint_To_v1beta3_DaemonEndpoint(in, out, s)
}

func autoConvert_v1beta3_DeleteOptions_To_api_DeleteOptions(in *DeleteOptions, out *api.DeleteOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.GracePeriodSeconds = in.GracePeriodSeconds
	return nil
}

func Convert_v1beta3_DeleteOptions_To_api_DeleteOptions(in *DeleteOptions, out *api.DeleteOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_DeleteOptions_To_api_DeleteOptions(in, out, s)
}

func autoConvert_v1beta3_EmptyDirVolumeSource_To_api_EmptyDirVolumeSource(in *EmptyDirVolumeSource, out *api.EmptyDirVolumeSource, s conversion.Scope) error {
	out.Medium = api.StorageMedium(in.Medium)
	return nil
}

func Convert_v1beta3_EmptyDirVolumeSource_To_api_EmptyDirVolumeSource(in *EmptyDirVolumeSource, out *api.EmptyDirVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_EmptyDirVolumeSource_To_api_EmptyDirVolumeSource(in, out, s)
}

func autoConvert_api_EmptyDirVolumeSource_To_v1beta3_EmptyDirVolumeSource(in *api.EmptyDirVolumeSource, out *EmptyDirVolumeSource, s conversion.Scope) error {
	out.Medium = StorageMedium(in.Medium)
	return nil
}

func Convert_api_EmptyDirVolumeSource_To_v1beta3_EmptyDirVolumeSource(in *api.EmptyDirVolumeSource, out *EmptyDirVolumeSource, s conversion.Scope) error {
	return autoConvert_api_EmptyDirVolumeSource_To_v1beta3_EmptyDirVolumeSource(in, out, s)
}

func autoConvert_v1beta3_EndpointAddress_To_api_EndpointAddress(in *EndpointAddress, out *api.EndpointAddress, s conversion.Scope) error {
	out.IP = in.IP
	if in.TargetRef != nil {
		in, out := &in.TargetRef, &out.TargetRef
		*out = new(api.ObjectReference)
		if err := Convert_v1beta3_ObjectReference_To_api_ObjectReference(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.TargetRef = nil
	}
	return nil
}

func Convert_v1beta3_EndpointAddress_To_api_EndpointAddress(in *EndpointAddress, out *api.EndpointAddress, s conversion.Scope) error {
	return autoConvert_v1beta3_EndpointAddress_To_api_EndpointAddress(in, out, s)
}

func autoConvert_v1beta3_EndpointPort_To_api_EndpointPort(in *EndpointPort, out *api.EndpointPort, s conversion.Scope) error {
	out.Name = in.Name
	out.Port = int32(in.Port)
	out.Protocol = api.Protocol(in.Protocol)
	return nil
}

func Convert_v1beta3_EndpointPort_To_api_EndpointPort(in *EndpointPort, out *api.EndpointPort, s conversion.Scope) error {
	return autoConvert_v1beta3_EndpointPort_To_api_EndpointPort(in, out, s)
}

func autoConvert_api_EndpointPort_To_v1beta3_EndpointPort(in *api.EndpointPort, out *EndpointPort, s conversion.Scope) error {
	out.Name = in.Name
	out.Port = int(in.Port)
	out.Protocol = Protocol(in.Protocol)
	return nil
}

func Convert_api_EndpointPort_To_v1beta3_EndpointPort(in *api.EndpointPort, out *EndpointPort, s conversion.Scope) error {
	return autoConvert_api_EndpointPort_To_v1beta3_EndpointPort(in, out, s)
}

func autoConvert_v1beta3_EndpointSubset_To_api_EndpointSubset(in *EndpointSubset, out *api.EndpointSubset, s conversion.Scope) error {
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]api.EndpointAddress, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_EndpointAddress_To_api_EndpointAddress(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Addresses = nil
	}
	if in.NotReadyAddresses != nil {
		in, out := &in.NotReadyAddresses, &out.NotReadyAddresses
		*out = make([]api.EndpointAddress, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_EndpointAddress_To_api_EndpointAddress(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.NotReadyAddresses = nil
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]api.EndpointPort, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_EndpointPort_To_api_EndpointPort(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ports = nil
	}
	return nil
}

func Convert_v1beta3_EndpointSubset_To_api_EndpointSubset(in *EndpointSubset, out *api.EndpointSubset, s conversion.Scope) error {
	return autoConvert_v1beta3_EndpointSubset_To_api_EndpointSubset(in, out, s)
}

func autoConvert_v1beta3_Endpoints_To_api_Endpoints(in *Endpoints, out *api.Endpoints, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if in.Subsets != nil {
		in, out := &in.Subsets, &out.Subsets
		*out = make([]api.EndpointSubset, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_EndpointSubset_To_api_EndpointSubset(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Subsets = nil
	}
	return nil
}

func Convert_v1beta3_Endpoints_To_api_Endpoints(in *Endpoints, out *api.Endpoints, s conversion.Scope) error {
	return autoConvert_v1beta3_Endpoints_To_api_Endpoints(in, out, s)
}

func autoConvert_v1beta3_EndpointsList_To_api_EndpointsList(in *EndpointsList, out *api.EndpointsList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Endpoints, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_Endpoints_To_api_Endpoints(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_EndpointsList_To_api_EndpointsList(in *EndpointsList, out *api.EndpointsList, s conversion.Scope) error {
	return autoConvert_v1beta3_EndpointsList_To_api_EndpointsList(in, out, s)
}

func autoConvert_v1beta3_EnvVar_To_api_EnvVar(in *EnvVar, out *api.EnvVar, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	if in.ValueFrom != nil {
		in, out := &in.ValueFrom, &out.ValueFrom
		*out = new(api.EnvVarSource)
		if err := Convert_v1beta3_EnvVarSource_To_api_EnvVarSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ValueFrom = nil
	}
	return nil
}

func Convert_v1beta3_EnvVar_To_api_EnvVar(in *EnvVar, out *api.EnvVar, s conversion.Scope) error {
	return autoConvert_v1beta3_EnvVar_To_api_EnvVar(in, out, s)
}

func autoConvert_v1beta3_EnvVarSource_To_api_EnvVarSource(in *EnvVarSource, out *api.EnvVarSource, s conversion.Scope) error {
	if in.FieldRef != nil {
		in, out := &in.FieldRef, &out.FieldRef
		*out = new(api.ObjectFieldSelector)
		if err := Convert_v1beta3_ObjectFieldSelector_To_api_ObjectFieldSelector(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.FieldRef = nil
	}
	return nil
}

func Convert_v1beta3_EnvVarSource_To_api_EnvVarSource(in *EnvVarSource, out *api.EnvVarSource, s conversion.Scope) error {
	return autoConvert_v1beta3_EnvVarSource_To_api_EnvVarSource(in, out, s)
}

func autoConvert_v1beta3_Event_To_api_Event(in *Event, out *api.Event, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectReference_To_api_ObjectReference(&in.InvolvedObject, &out.InvolvedObject, s); err != nil {
		return err
	}
	out.Reason = in.Reason
	out.Message = in.Message
	if err := Convert_v1beta3_EventSource_To_api_EventSource(&in.Source, &out.Source, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.FirstTimestamp, &out.FirstTimestamp, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastTimestamp, &out.LastTimestamp, s); err != nil {
		return err
	}
	out.Count = int32(in.Count)
	return nil
}

func Convert_v1beta3_Event_To_api_Event(in *Event, out *api.Event, s conversion.Scope) error {
	return autoConvert_v1beta3_Event_To_api_Event(in, out, s)
}

func autoConvert_v1beta3_EventList_To_api_EventList(in *EventList, out *api.EventList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Event, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_Event_To_api_Event(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_EventList_To_api_EventList(in *EventList, out *api.EventList, s conversion.Scope) error {
	return autoConvert_v1beta3_EventList_To_api_EventList(in, out, s)
}

func autoConvert_v1beta3_EventSource_To_api_EventSource(in *EventSource, out *api.EventSource, s conversion.Scope) error {
	out.Component = in.Component
	out.Host = in.Host
	return nil
}

func Convert_v1beta3_EventSource_To_api_EventSource(in *EventSource, out *api.EventSource, s conversion.Scope) error {
	return autoConvert_v1beta3_EventSource_To_api_EventSource(in, out, s)
}

func autoConvert_api_EventSource_To_v1beta3_EventSource(in *api.EventSource, out *EventSource, s conversion.Scope) error {
	out.Component = in.Component
	out.Host = in.Host
	return nil
}

func Convert_api_EventSource_To_v1beta3_EventSource(in *api.EventSource, out *EventSource, s conversion.Scope) error {
	return autoConvert_api_EventSource_To_v1beta3_EventSource(in, out, s)
}

func autoConvert_v1beta3_ExecAction_To_api_ExecAction(in *ExecAction, out *api.ExecAction, s conversion.Scope) error {
	out.Command = in.Command
	return nil
}

func Convert_v1beta3_ExecAction_To_api_ExecAction(in *ExecAction, out *api.ExecAction, s conversion.Scope) error {
	return autoConvert_v1beta3_ExecAction_To_api_ExecAction(in, out, s)
}

func autoConvert_api_ExecAction_To_v1beta3_ExecAction(in *api.ExecAction, out *ExecAction, s conversion.Scope) error {
	out.Command = in.Command
	return nil
}

func Convert_api_ExecAction_To_v1beta3_ExecAction(in *api.ExecAction, out *ExecAction, s conversion.Scope) error {
	return autoConvert_api_ExecAction_To_v1beta3_ExecAction(in, out, s)
}

func autoConvert_v1beta3_FCVolumeSource_To_api_FCVolumeSource(in *FCVolumeSource, out *api.FCVolumeSource, s conversion.Scope) error {
	out.TargetWWNs = in.TargetWWNs
	if in.Lun != nil {
		in, out := &in.Lun, &out.Lun
		*out = new(int32)
		**out = int32(**in)
	} else {
		out.Lun = nil
	}
	out.FSType = in.FSType
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_FCVolumeSource_To_api_FCVolumeSource(in *FCVolumeSource, out *api.FCVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_FCVolumeSource_To_api_FCVolumeSource(in, out, s)
}

func autoConvert_api_FCVolumeSource_To_v1beta3_FCVolumeSource(in *api.FCVolumeSource, out *FCVolumeSource, s conversion.Scope) error {
	out.TargetWWNs = in.TargetWWNs
	if in.Lun != nil {
		in, out := &in.Lun, &out.Lun
		*out = new(int)
		**out = int(**in)
	} else {
		out.Lun = nil
	}
	out.FSType = in.FSType
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_FCVolumeSource_To_v1beta3_FCVolumeSource(in *api.FCVolumeSource, out *FCVolumeSource, s conversion.Scope) error {
	return autoConvert_api_FCVolumeSource_To_v1beta3_FCVolumeSource(in, out, s)
}

func autoConvert_v1beta3_FSGroupStrategyOptions_To_api_FSGroupStrategyOptions(in *FSGroupStrategyOptions, out *api.FSGroupStrategyOptions, s conversion.Scope) error {
	out.Type = api.FSGroupStrategyType(in.Type)
	if in.Ranges != nil {
		in, out := &in.Ranges, &out.Ranges
		*out = make([]api.IDRange, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_IDRange_To_api_IDRange(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ranges = nil
	}
	return nil
}

func Convert_v1beta3_FSGroupStrategyOptions_To_api_FSGroupStrategyOptions(in *FSGroupStrategyOptions, out *api.FSGroupStrategyOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_FSGroupStrategyOptions_To_api_FSGroupStrategyOptions(in, out, s)
}

func autoConvert_api_FSGroupStrategyOptions_To_v1beta3_FSGroupStrategyOptions(in *api.FSGroupStrategyOptions, out *FSGroupStrategyOptions, s conversion.Scope) error {
	out.Type = FSGroupStrategyType(in.Type)
	if in.Ranges != nil {
		in, out := &in.Ranges, &out.Ranges
		*out = make([]IDRange, len(*in))
		for i := range *in {
			if err := Convert_api_IDRange_To_v1beta3_IDRange(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ranges = nil
	}
	return nil
}

func Convert_api_FSGroupStrategyOptions_To_v1beta3_FSGroupStrategyOptions(in *api.FSGroupStrategyOptions, out *FSGroupStrategyOptions, s conversion.Scope) error {
	return autoConvert_api_FSGroupStrategyOptions_To_v1beta3_FSGroupStrategyOptions(in, out, s)
}

func autoConvert_v1beta3_FlockerVolumeSource_To_api_FlockerVolumeSource(in *FlockerVolumeSource, out *api.FlockerVolumeSource, s conversion.Scope) error {
	out.DatasetName = in.DatasetName
	return nil
}

func Convert_v1beta3_FlockerVolumeSource_To_api_FlockerVolumeSource(in *FlockerVolumeSource, out *api.FlockerVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_FlockerVolumeSource_To_api_FlockerVolumeSource(in, out, s)
}

func autoConvert_api_FlockerVolumeSource_To_v1beta3_FlockerVolumeSource(in *api.FlockerVolumeSource, out *FlockerVolumeSource, s conversion.Scope) error {
	out.DatasetName = in.DatasetName
	return nil
}

func Convert_api_FlockerVolumeSource_To_v1beta3_FlockerVolumeSource(in *api.FlockerVolumeSource, out *FlockerVolumeSource, s conversion.Scope) error {
	return autoConvert_api_FlockerVolumeSource_To_v1beta3_FlockerVolumeSource(in, out, s)
}

func autoConvert_v1beta3_GCEPersistentDiskVolumeSource_To_api_GCEPersistentDiskVolumeSource(in *GCEPersistentDiskVolumeSource, out *api.GCEPersistentDiskVolumeSource, s conversion.Scope) error {
	out.PDName = in.PDName
	out.FSType = in.FSType
	out.Partition = int32(in.Partition)
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_GCEPersistentDiskVolumeSource_To_api_GCEPersistentDiskVolumeSource(in *GCEPersistentDiskVolumeSource, out *api.GCEPersistentDiskVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_GCEPersistentDiskVolumeSource_To_api_GCEPersistentDiskVolumeSource(in, out, s)
}

func autoConvert_api_GCEPersistentDiskVolumeSource_To_v1beta3_GCEPersistentDiskVolumeSource(in *api.GCEPersistentDiskVolumeSource, out *GCEPersistentDiskVolumeSource, s conversion.Scope) error {
	out.PDName = in.PDName
	out.FSType = in.FSType
	out.Partition = int(in.Partition)
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_GCEPersistentDiskVolumeSource_To_v1beta3_GCEPersistentDiskVolumeSource(in *api.GCEPersistentDiskVolumeSource, out *GCEPersistentDiskVolumeSource, s conversion.Scope) error {
	return autoConvert_api_GCEPersistentDiskVolumeSource_To_v1beta3_GCEPersistentDiskVolumeSource(in, out, s)
}

func autoConvert_v1beta3_GitRepoVolumeSource_To_api_GitRepoVolumeSource(in *GitRepoVolumeSource, out *api.GitRepoVolumeSource, s conversion.Scope) error {
	out.Repository = in.Repository
	out.Revision = in.Revision
	return nil
}

func Convert_v1beta3_GitRepoVolumeSource_To_api_GitRepoVolumeSource(in *GitRepoVolumeSource, out *api.GitRepoVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_GitRepoVolumeSource_To_api_GitRepoVolumeSource(in, out, s)
}

func autoConvert_v1beta3_GlusterfsVolumeSource_To_api_GlusterfsVolumeSource(in *GlusterfsVolumeSource, out *api.GlusterfsVolumeSource, s conversion.Scope) error {
	out.EndpointsName = in.EndpointsName
	out.Path = in.Path
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_GlusterfsVolumeSource_To_api_GlusterfsVolumeSource(in *GlusterfsVolumeSource, out *api.GlusterfsVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_GlusterfsVolumeSource_To_api_GlusterfsVolumeSource(in, out, s)
}

func autoConvert_api_GlusterfsVolumeSource_To_v1beta3_GlusterfsVolumeSource(in *api.GlusterfsVolumeSource, out *GlusterfsVolumeSource, s conversion.Scope) error {
	out.EndpointsName = in.EndpointsName
	out.Path = in.Path
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_GlusterfsVolumeSource_To_v1beta3_GlusterfsVolumeSource(in *api.GlusterfsVolumeSource, out *GlusterfsVolumeSource, s conversion.Scope) error {
	return autoConvert_api_GlusterfsVolumeSource_To_v1beta3_GlusterfsVolumeSource(in, out, s)
}

func autoConvert_v1beta3_HTTPGetAction_To_api_HTTPGetAction(in *HTTPGetAction, out *api.HTTPGetAction, s conversion.Scope) error {
	out.Path = in.Path
	if err := api.Convert_intstr_IntOrString_To_intstr_IntOrString(&in.Port, &out.Port, s); err != nil {
		return err
	}
	out.Host = in.Host
	out.Scheme = api.URIScheme(in.Scheme)
	return nil
}

func Convert_v1beta3_HTTPGetAction_To_api_HTTPGetAction(in *HTTPGetAction, out *api.HTTPGetAction, s conversion.Scope) error {
	return autoConvert_v1beta3_HTTPGetAction_To_api_HTTPGetAction(in, out, s)
}

func autoConvert_v1beta3_Handler_To_api_Handler(in *Handler, out *api.Handler, s conversion.Scope) error {
	if in.Exec != nil {
		in, out := &in.Exec, &out.Exec
		*out = new(api.ExecAction)
		if err := Convert_v1beta3_ExecAction_To_api_ExecAction(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Exec = nil
	}
	if in.HTTPGet != nil {
		in, out := &in.HTTPGet, &out.HTTPGet
		*out = new(api.HTTPGetAction)
		if err := Convert_v1beta3_HTTPGetAction_To_api_HTTPGetAction(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.HTTPGet = nil
	}
	if in.TCPSocket != nil {
		in, out := &in.TCPSocket, &out.TCPSocket
		*out = new(api.TCPSocketAction)
		if err := Convert_v1beta3_TCPSocketAction_To_api_TCPSocketAction(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.TCPSocket = nil
	}
	return nil
}

func Convert_v1beta3_Handler_To_api_Handler(in *Handler, out *api.Handler, s conversion.Scope) error {
	return autoConvert_v1beta3_Handler_To_api_Handler(in, out, s)
}

func autoConvert_v1beta3_HostPathVolumeSource_To_api_HostPathVolumeSource(in *HostPathVolumeSource, out *api.HostPathVolumeSource, s conversion.Scope) error {
	out.Path = in.Path
	return nil
}

func Convert_v1beta3_HostPathVolumeSource_To_api_HostPathVolumeSource(in *HostPathVolumeSource, out *api.HostPathVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_HostPathVolumeSource_To_api_HostPathVolumeSource(in, out, s)
}

func autoConvert_api_HostPathVolumeSource_To_v1beta3_HostPathVolumeSource(in *api.HostPathVolumeSource, out *HostPathVolumeSource, s conversion.Scope) error {
	out.Path = in.Path
	return nil
}

func Convert_api_HostPathVolumeSource_To_v1beta3_HostPathVolumeSource(in *api.HostPathVolumeSource, out *HostPathVolumeSource, s conversion.Scope) error {
	return autoConvert_api_HostPathVolumeSource_To_v1beta3_HostPathVolumeSource(in, out, s)
}

func autoConvert_v1beta3_IDRange_To_api_IDRange(in *IDRange, out *api.IDRange, s conversion.Scope) error {
	out.Min = in.Min
	out.Max = in.Max
	return nil
}

func Convert_v1beta3_IDRange_To_api_IDRange(in *IDRange, out *api.IDRange, s conversion.Scope) error {
	return autoConvert_v1beta3_IDRange_To_api_IDRange(in, out, s)
}

func autoConvert_api_IDRange_To_v1beta3_IDRange(in *api.IDRange, out *IDRange, s conversion.Scope) error {
	out.Min = in.Min
	out.Max = in.Max
	return nil
}

func Convert_api_IDRange_To_v1beta3_IDRange(in *api.IDRange, out *IDRange, s conversion.Scope) error {
	return autoConvert_api_IDRange_To_v1beta3_IDRange(in, out, s)
}

func autoConvert_v1beta3_ISCSIVolumeSource_To_api_ISCSIVolumeSource(in *ISCSIVolumeSource, out *api.ISCSIVolumeSource, s conversion.Scope) error {
	out.TargetPortal = in.TargetPortal
	out.IQN = in.IQN
	out.Lun = int32(in.Lun)
	out.FSType = in.FSType
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_ISCSIVolumeSource_To_api_ISCSIVolumeSource(in *ISCSIVolumeSource, out *api.ISCSIVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_ISCSIVolumeSource_To_api_ISCSIVolumeSource(in, out, s)
}

func autoConvert_v1beta3_Lifecycle_To_api_Lifecycle(in *Lifecycle, out *api.Lifecycle, s conversion.Scope) error {
	if in.PostStart != nil {
		in, out := &in.PostStart, &out.PostStart
		*out = new(api.Handler)
		if err := Convert_v1beta3_Handler_To_api_Handler(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.PostStart = nil
	}
	if in.PreStop != nil {
		in, out := &in.PreStop, &out.PreStop
		*out = new(api.Handler)
		if err := Convert_v1beta3_Handler_To_api_Handler(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.PreStop = nil
	}
	return nil
}

func Convert_v1beta3_Lifecycle_To_api_Lifecycle(in *Lifecycle, out *api.Lifecycle, s conversion.Scope) error {
	return autoConvert_v1beta3_Lifecycle_To_api_Lifecycle(in, out, s)
}

func autoConvert_v1beta3_LimitRange_To_api_LimitRange(in *LimitRange, out *api.LimitRange, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_LimitRangeSpec_To_api_LimitRangeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_LimitRange_To_api_LimitRange(in *LimitRange, out *api.LimitRange, s conversion.Scope) error {
	return autoConvert_v1beta3_LimitRange_To_api_LimitRange(in, out, s)
}

func autoConvert_v1beta3_LimitRangeItem_To_api_LimitRangeItem(in *LimitRangeItem, out *api.LimitRangeItem, s conversion.Scope) error {
	out.Type = api.LimitType(in.Type)
	if in.Max != nil {
		in, out := &in.Max, &out.Max
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Max = nil
	}
	if in.Min != nil {
		in, out := &in.Min, &out.Min
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Min = nil
	}
	if in.Default != nil {
		in, out := &in.Default, &out.Default
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Default = nil
	}
	if in.DefaultRequest != nil {
		in, out := &in.DefaultRequest, &out.DefaultRequest
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.DefaultRequest = nil
	}
	if in.MaxLimitRequestRatio != nil {
		in, out := &in.MaxLimitRequestRatio, &out.MaxLimitRequestRatio
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.MaxLimitRequestRatio = nil
	}
	return nil
}

func Convert_v1beta3_LimitRangeItem_To_api_LimitRangeItem(in *LimitRangeItem, out *api.LimitRangeItem, s conversion.Scope) error {
	return autoConvert_v1beta3_LimitRangeItem_To_api_LimitRangeItem(in, out, s)
}

func autoConvert_api_LimitRangeItem_To_v1beta3_LimitRangeItem(in *api.LimitRangeItem, out *LimitRangeItem, s conversion.Scope) error {
	out.Type = LimitType(in.Type)
	if in.Max != nil {
		in, out := &in.Max, &out.Max
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Max = nil
	}
	if in.Min != nil {
		in, out := &in.Min, &out.Min
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Min = nil
	}
	if in.Default != nil {
		in, out := &in.Default, &out.Default
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Default = nil
	}
	if in.DefaultRequest != nil {
		in, out := &in.DefaultRequest, &out.DefaultRequest
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.DefaultRequest = nil
	}
	if in.MaxLimitRequestRatio != nil {
		in, out := &in.MaxLimitRequestRatio, &out.MaxLimitRequestRatio
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.MaxLimitRequestRatio = nil
	}
	return nil
}

func Convert_api_LimitRangeItem_To_v1beta3_LimitRangeItem(in *api.LimitRangeItem, out *LimitRangeItem, s conversion.Scope) error {
	return autoConvert_api_LimitRangeItem_To_v1beta3_LimitRangeItem(in, out, s)
}

func autoConvert_v1beta3_LimitRangeList_To_api_LimitRangeList(in *LimitRangeList, out *api.LimitRangeList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.LimitRange, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_LimitRange_To_api_LimitRange(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_LimitRangeList_To_api_LimitRangeList(in *LimitRangeList, out *api.LimitRangeList, s conversion.Scope) error {
	return autoConvert_v1beta3_LimitRangeList_To_api_LimitRangeList(in, out, s)
}

func autoConvert_v1beta3_LimitRangeSpec_To_api_LimitRangeSpec(in *LimitRangeSpec, out *api.LimitRangeSpec, s conversion.Scope) error {
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make([]api.LimitRangeItem, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_LimitRangeItem_To_api_LimitRangeItem(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Limits = nil
	}
	return nil
}

func Convert_v1beta3_LimitRangeSpec_To_api_LimitRangeSpec(in *LimitRangeSpec, out *api.LimitRangeSpec, s conversion.Scope) error {
	return autoConvert_v1beta3_LimitRangeSpec_To_api_LimitRangeSpec(in, out, s)
}

func autoConvert_api_LimitRangeSpec_To_v1beta3_LimitRangeSpec(in *api.LimitRangeSpec, out *LimitRangeSpec, s conversion.Scope) error {
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make([]LimitRangeItem, len(*in))
		for i := range *in {
			if err := Convert_api_LimitRangeItem_To_v1beta3_LimitRangeItem(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Limits = nil
	}
	return nil
}

func Convert_api_LimitRangeSpec_To_v1beta3_LimitRangeSpec(in *api.LimitRangeSpec, out *LimitRangeSpec, s conversion.Scope) error {
	return autoConvert_api_LimitRangeSpec_To_v1beta3_LimitRangeSpec(in, out, s)
}

func autoConvert_v1beta3_List_To_api_List(in *List, out *api.List, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]runtime.Object, len(*in))
		for i := range *in {
			if err := runtime.Convert_runtime_RawExtension_To_runtime_Object(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_List_To_api_List(in *List, out *api.List, s conversion.Scope) error {
	return autoConvert_v1beta3_List_To_api_List(in, out, s)
}

func autoConvert_api_List_To_v1beta3_List(in *api.List, out *List, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_unversioned_ListMeta_To_v1beta3_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]runtime.RawExtension, len(*in))
		for i := range *in {
			if err := runtime.Convert_runtime_Object_To_runtime_RawExtension(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_List_To_v1beta3_List(in *api.List, out *List, s conversion.Scope) error {
	return autoConvert_api_List_To_v1beta3_List(in, out, s)
}

func autoConvert_v1beta3_ListMeta_To_unversioned_ListMeta(in *ListMeta, out *unversioned.ListMeta, s conversion.Scope) error {
	out.SelfLink = in.SelfLink
	out.ResourceVersion = in.ResourceVersion
	return nil
}

func Convert_v1beta3_ListMeta_To_unversioned_ListMeta(in *ListMeta, out *unversioned.ListMeta, s conversion.Scope) error {
	return autoConvert_v1beta3_ListMeta_To_unversioned_ListMeta(in, out, s)
}

func autoConvert_unversioned_ListMeta_To_v1beta3_ListMeta(in *unversioned.ListMeta, out *ListMeta, s conversion.Scope) error {
	out.SelfLink = in.SelfLink
	out.ResourceVersion = in.ResourceVersion
	return nil
}

func Convert_unversioned_ListMeta_To_v1beta3_ListMeta(in *unversioned.ListMeta, out *ListMeta, s conversion.Scope) error {
	return autoConvert_unversioned_ListMeta_To_v1beta3_ListMeta(in, out, s)
}

func autoConvert_v1beta3_ListOptions_To_api_ListOptions(in *ListOptions, out *api.ListOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_string_To_labels_Selector(&in.LabelSelector, &out.LabelSelector, s); err != nil {
		return err
	}
	if err := api.Convert_string_To_fields_Selector(&in.FieldSelector, &out.FieldSelector, s); err != nil {
		return err
	}
	out.Watch = in.Watch
	out.ResourceVersion = in.ResourceVersion
	return nil
}

func Convert_v1beta3_ListOptions_To_api_ListOptions(in *ListOptions, out *api.ListOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_ListOptions_To_api_ListOptions(in, out, s)
}

func autoConvert_v1beta3_LoadBalancerIngress_To_api_LoadBalancerIngress(in *LoadBalancerIngress, out *api.LoadBalancerIngress, s conversion.Scope) error {
	out.IP = in.IP
	out.Hostname = in.Hostname
	return nil
}

func Convert_v1beta3_LoadBalancerIngress_To_api_LoadBalancerIngress(in *LoadBalancerIngress, out *api.LoadBalancerIngress, s conversion.Scope) error {
	return autoConvert_v1beta3_LoadBalancerIngress_To_api_LoadBalancerIngress(in, out, s)
}

func autoConvert_api_LoadBalancerIngress_To_v1beta3_LoadBalancerIngress(in *api.LoadBalancerIngress, out *LoadBalancerIngress, s conversion.Scope) error {
	out.IP = in.IP
	out.Hostname = in.Hostname
	return nil
}

func Convert_api_LoadBalancerIngress_To_v1beta3_LoadBalancerIngress(in *api.LoadBalancerIngress, out *LoadBalancerIngress, s conversion.Scope) error {
	return autoConvert_api_LoadBalancerIngress_To_v1beta3_LoadBalancerIngress(in, out, s)
}

func autoConvert_v1beta3_LoadBalancerStatus_To_api_LoadBalancerStatus(in *LoadBalancerStatus, out *api.LoadBalancerStatus, s conversion.Scope) error {
	if in.Ingress != nil {
		in, out := &in.Ingress, &out.Ingress
		*out = make([]api.LoadBalancerIngress, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_LoadBalancerIngress_To_api_LoadBalancerIngress(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ingress = nil
	}
	return nil
}

func Convert_v1beta3_LoadBalancerStatus_To_api_LoadBalancerStatus(in *LoadBalancerStatus, out *api.LoadBalancerStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_LoadBalancerStatus_To_api_LoadBalancerStatus(in, out, s)
}

func autoConvert_api_LoadBalancerStatus_To_v1beta3_LoadBalancerStatus(in *api.LoadBalancerStatus, out *LoadBalancerStatus, s conversion.Scope) error {
	if in.Ingress != nil {
		in, out := &in.Ingress, &out.Ingress
		*out = make([]LoadBalancerIngress, len(*in))
		for i := range *in {
			if err := Convert_api_LoadBalancerIngress_To_v1beta3_LoadBalancerIngress(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ingress = nil
	}
	return nil
}

func Convert_api_LoadBalancerStatus_To_v1beta3_LoadBalancerStatus(in *api.LoadBalancerStatus, out *LoadBalancerStatus, s conversion.Scope) error {
	return autoConvert_api_LoadBalancerStatus_To_v1beta3_LoadBalancerStatus(in, out, s)
}

func autoConvert_v1beta3_LocalObjectReference_To_api_LocalObjectReference(in *LocalObjectReference, out *api.LocalObjectReference, s conversion.Scope) error {
	out.Name = in.Name
	return nil
}

func Convert_v1beta3_LocalObjectReference_To_api_LocalObjectReference(in *LocalObjectReference, out *api.LocalObjectReference, s conversion.Scope) error {
	return autoConvert_v1beta3_LocalObjectReference_To_api_LocalObjectReference(in, out, s)
}

func autoConvert_api_LocalObjectReference_To_v1beta3_LocalObjectReference(in *api.LocalObjectReference, out *LocalObjectReference, s conversion.Scope) error {
	out.Name = in.Name
	return nil
}

func Convert_api_LocalObjectReference_To_v1beta3_LocalObjectReference(in *api.LocalObjectReference, out *LocalObjectReference, s conversion.Scope) error {
	return autoConvert_api_LocalObjectReference_To_v1beta3_LocalObjectReference(in, out, s)
}

func autoConvert_v1beta3_NFSVolumeSource_To_api_NFSVolumeSource(in *NFSVolumeSource, out *api.NFSVolumeSource, s conversion.Scope) error {
	out.Server = in.Server
	out.Path = in.Path
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_NFSVolumeSource_To_api_NFSVolumeSource(in *NFSVolumeSource, out *api.NFSVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_NFSVolumeSource_To_api_NFSVolumeSource(in, out, s)
}

func autoConvert_api_NFSVolumeSource_To_v1beta3_NFSVolumeSource(in *api.NFSVolumeSource, out *NFSVolumeSource, s conversion.Scope) error {
	out.Server = in.Server
	out.Path = in.Path
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_NFSVolumeSource_To_v1beta3_NFSVolumeSource(in *api.NFSVolumeSource, out *NFSVolumeSource, s conversion.Scope) error {
	return autoConvert_api_NFSVolumeSource_To_v1beta3_NFSVolumeSource(in, out, s)
}

func autoConvert_v1beta3_Namespace_To_api_Namespace(in *Namespace, out *api.Namespace, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_NamespaceSpec_To_api_NamespaceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_NamespaceStatus_To_api_NamespaceStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_Namespace_To_api_Namespace(in *Namespace, out *api.Namespace, s conversion.Scope) error {
	return autoConvert_v1beta3_Namespace_To_api_Namespace(in, out, s)
}

func autoConvert_v1beta3_NamespaceList_To_api_NamespaceList(in *NamespaceList, out *api.NamespaceList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Namespace, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_Namespace_To_api_Namespace(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_NamespaceList_To_api_NamespaceList(in *NamespaceList, out *api.NamespaceList, s conversion.Scope) error {
	return autoConvert_v1beta3_NamespaceList_To_api_NamespaceList(in, out, s)
}

func autoConvert_v1beta3_NamespaceSpec_To_api_NamespaceSpec(in *NamespaceSpec, out *api.NamespaceSpec, s conversion.Scope) error {
	if in.Finalizers != nil {
		in, out := &in.Finalizers, &out.Finalizers
		*out = make([]api.FinalizerName, len(*in))
		for i := range *in {
			(*out)[i] = api.FinalizerName((*in)[i])
		}
	} else {
		out.Finalizers = nil
	}
	return nil
}

func Convert_v1beta3_NamespaceSpec_To_api_NamespaceSpec(in *NamespaceSpec, out *api.NamespaceSpec, s conversion.Scope) error {
	return autoConvert_v1beta3_NamespaceSpec_To_api_NamespaceSpec(in, out, s)
}

func autoConvert_api_NamespaceSpec_To_v1beta3_NamespaceSpec(in *api.NamespaceSpec, out *NamespaceSpec, s conversion.Scope) error {
	if in.Finalizers != nil {
		in, out := &in.Finalizers, &out.Finalizers
		*out = make([]FinalizerName, len(*in))
		for i := range *in {
			(*out)[i] = FinalizerName((*in)[i])
		}
	} else {
		out.Finalizers = nil
	}
	return nil
}

func Convert_api_NamespaceSpec_To_v1beta3_NamespaceSpec(in *api.NamespaceSpec, out *NamespaceSpec, s conversion.Scope) error {
	return autoConvert_api_NamespaceSpec_To_v1beta3_NamespaceSpec(in, out, s)
}

func autoConvert_v1beta3_NamespaceStatus_To_api_NamespaceStatus(in *NamespaceStatus, out *api.NamespaceStatus, s conversion.Scope) error {
	out.Phase = api.NamespacePhase(in.Phase)
	return nil
}

func Convert_v1beta3_NamespaceStatus_To_api_NamespaceStatus(in *NamespaceStatus, out *api.NamespaceStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_NamespaceStatus_To_api_NamespaceStatus(in, out, s)
}

func autoConvert_api_NamespaceStatus_To_v1beta3_NamespaceStatus(in *api.NamespaceStatus, out *NamespaceStatus, s conversion.Scope) error {
	out.Phase = NamespacePhase(in.Phase)
	return nil
}

func Convert_api_NamespaceStatus_To_v1beta3_NamespaceStatus(in *api.NamespaceStatus, out *NamespaceStatus, s conversion.Scope) error {
	return autoConvert_api_NamespaceStatus_To_v1beta3_NamespaceStatus(in, out, s)
}

func autoConvert_v1beta3_NodeAddress_To_api_NodeAddress(in *NodeAddress, out *api.NodeAddress, s conversion.Scope) error {
	out.Type = api.NodeAddressType(in.Type)
	out.Address = in.Address
	return nil
}

func Convert_v1beta3_NodeAddress_To_api_NodeAddress(in *NodeAddress, out *api.NodeAddress, s conversion.Scope) error {
	return autoConvert_v1beta3_NodeAddress_To_api_NodeAddress(in, out, s)
}

func autoConvert_api_NodeAddress_To_v1beta3_NodeAddress(in *api.NodeAddress, out *NodeAddress, s conversion.Scope) error {
	out.Type = NodeAddressType(in.Type)
	out.Address = in.Address
	return nil
}

func Convert_api_NodeAddress_To_v1beta3_NodeAddress(in *api.NodeAddress, out *NodeAddress, s conversion.Scope) error {
	return autoConvert_api_NodeAddress_To_v1beta3_NodeAddress(in, out, s)
}

func autoConvert_v1beta3_NodeCondition_To_api_NodeCondition(in *NodeCondition, out *api.NodeCondition, s conversion.Scope) error {
	out.Type = api.NodeConditionType(in.Type)
	out.Status = api.ConditionStatus(in.Status)
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastHeartbeatTime, &out.LastHeartbeatTime, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastTransitionTime, &out.LastTransitionTime, s); err != nil {
		return err
	}
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

func Convert_v1beta3_NodeCondition_To_api_NodeCondition(in *NodeCondition, out *api.NodeCondition, s conversion.Scope) error {
	return autoConvert_v1beta3_NodeCondition_To_api_NodeCondition(in, out, s)
}

func autoConvert_api_NodeCondition_To_v1beta3_NodeCondition(in *api.NodeCondition, out *NodeCondition, s conversion.Scope) error {
	out.Type = NodeConditionType(in.Type)
	out.Status = ConditionStatus(in.Status)
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastHeartbeatTime, &out.LastHeartbeatTime, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastTransitionTime, &out.LastTransitionTime, s); err != nil {
		return err
	}
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

func Convert_api_NodeCondition_To_v1beta3_NodeCondition(in *api.NodeCondition, out *NodeCondition, s conversion.Scope) error {
	return autoConvert_api_NodeCondition_To_v1beta3_NodeCondition(in, out, s)
}

func autoConvert_v1beta3_NodeDaemonEndpoints_To_api_NodeDaemonEndpoints(in *NodeDaemonEndpoints, out *api.NodeDaemonEndpoints, s conversion.Scope) error {
	if err := Convert_v1beta3_DaemonEndpoint_To_api_DaemonEndpoint(&in.KubeletEndpoint, &out.KubeletEndpoint, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_NodeDaemonEndpoints_To_api_NodeDaemonEndpoints(in *NodeDaemonEndpoints, out *api.NodeDaemonEndpoints, s conversion.Scope) error {
	return autoConvert_v1beta3_NodeDaemonEndpoints_To_api_NodeDaemonEndpoints(in, out, s)
}

func autoConvert_api_NodeDaemonEndpoints_To_v1beta3_NodeDaemonEndpoints(in *api.NodeDaemonEndpoints, out *NodeDaemonEndpoints, s conversion.Scope) error {
	if err := Convert_api_DaemonEndpoint_To_v1beta3_DaemonEndpoint(&in.KubeletEndpoint, &out.KubeletEndpoint, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_NodeDaemonEndpoints_To_v1beta3_NodeDaemonEndpoints(in *api.NodeDaemonEndpoints, out *NodeDaemonEndpoints, s conversion.Scope) error {
	return autoConvert_api_NodeDaemonEndpoints_To_v1beta3_NodeDaemonEndpoints(in, out, s)
}

func autoConvert_v1beta3_NodeSpec_To_api_NodeSpec(in *NodeSpec, out *api.NodeSpec, s conversion.Scope) error {
	out.PodCIDR = in.PodCIDR
	out.ExternalID = in.ExternalID
	out.ProviderID = in.ProviderID
	out.Unschedulable = in.Unschedulable
	return nil
}

func Convert_v1beta3_NodeSpec_To_api_NodeSpec(in *NodeSpec, out *api.NodeSpec, s conversion.Scope) error {
	return autoConvert_v1beta3_NodeSpec_To_api_NodeSpec(in, out, s)
}

func autoConvert_api_NodeSpec_To_v1beta3_NodeSpec(in *api.NodeSpec, out *NodeSpec, s conversion.Scope) error {
	out.PodCIDR = in.PodCIDR
	out.ExternalID = in.ExternalID
	out.ProviderID = in.ProviderID
	out.Unschedulable = in.Unschedulable
	return nil
}

func Convert_api_NodeSpec_To_v1beta3_NodeSpec(in *api.NodeSpec, out *NodeSpec, s conversion.Scope) error {
	return autoConvert_api_NodeSpec_To_v1beta3_NodeSpec(in, out, s)
}

func autoConvert_v1beta3_ObjectFieldSelector_To_api_ObjectFieldSelector(in *ObjectFieldSelector, out *api.ObjectFieldSelector, s conversion.Scope) error {
	out.APIVersion = in.APIVersion
	out.FieldPath = in.FieldPath
	return nil
}

func Convert_v1beta3_ObjectFieldSelector_To_api_ObjectFieldSelector(in *ObjectFieldSelector, out *api.ObjectFieldSelector, s conversion.Scope) error {
	return autoConvert_v1beta3_ObjectFieldSelector_To_api_ObjectFieldSelector(in, out, s)
}

func autoConvert_api_ObjectFieldSelector_To_v1beta3_ObjectFieldSelector(in *api.ObjectFieldSelector, out *ObjectFieldSelector, s conversion.Scope) error {
	out.APIVersion = in.APIVersion
	out.FieldPath = in.FieldPath
	return nil
}

func Convert_api_ObjectFieldSelector_To_v1beta3_ObjectFieldSelector(in *api.ObjectFieldSelector, out *ObjectFieldSelector, s conversion.Scope) error {
	return autoConvert_api_ObjectFieldSelector_To_v1beta3_ObjectFieldSelector(in, out, s)
}

func autoConvert_v1beta3_ObjectMeta_To_api_ObjectMeta(in *ObjectMeta, out *api.ObjectMeta, s conversion.Scope) error {
	out.Name = in.Name
	out.GenerateName = in.GenerateName
	out.Namespace = in.Namespace
	out.SelfLink = in.SelfLink
	out.UID = in.UID
	out.ResourceVersion = in.ResourceVersion
	out.Generation = in.Generation
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.CreationTimestamp, &out.CreationTimestamp, s); err != nil {
		return err
	}
	out.DeletionTimestamp = in.DeletionTimestamp
	out.DeletionGracePeriodSeconds = in.DeletionGracePeriodSeconds
	out.Labels = in.Labels
	out.Annotations = in.Annotations
	return nil
}

func Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(in *ObjectMeta, out *api.ObjectMeta, s conversion.Scope) error {
	return autoConvert_v1beta3_ObjectMeta_To_api_ObjectMeta(in, out, s)
}

func autoConvert_v1beta3_ObjectReference_To_api_ObjectReference(in *ObjectReference, out *api.ObjectReference, s conversion.Scope) error {
	out.Kind = in.Kind
	out.Namespace = in.Namespace
	out.Name = in.Name
	out.UID = in.UID
	out.APIVersion = in.APIVersion
	out.ResourceVersion = in.ResourceVersion
	out.FieldPath = in.FieldPath
	return nil
}

func Convert_v1beta3_ObjectReference_To_api_ObjectReference(in *ObjectReference, out *api.ObjectReference, s conversion.Scope) error {
	return autoConvert_v1beta3_ObjectReference_To_api_ObjectReference(in, out, s)
}

func autoConvert_api_ObjectReference_To_v1beta3_ObjectReference(in *api.ObjectReference, out *ObjectReference, s conversion.Scope) error {
	out.Kind = in.Kind
	out.Namespace = in.Namespace
	out.Name = in.Name
	out.UID = in.UID
	out.APIVersion = in.APIVersion
	out.ResourceVersion = in.ResourceVersion
	out.FieldPath = in.FieldPath
	return nil
}

func Convert_api_ObjectReference_To_v1beta3_ObjectReference(in *api.ObjectReference, out *ObjectReference, s conversion.Scope) error {
	return autoConvert_api_ObjectReference_To_v1beta3_ObjectReference(in, out, s)
}

func autoConvert_v1beta3_PersistentVolume_To_api_PersistentVolume(in *PersistentVolume, out *api.PersistentVolume, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PersistentVolumeSpec_To_api_PersistentVolumeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PersistentVolumeStatus_To_api_PersistentVolumeStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_PersistentVolume_To_api_PersistentVolume(in *PersistentVolume, out *api.PersistentVolume, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolume_To_api_PersistentVolume(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeClaim_To_api_PersistentVolumeClaim(in *PersistentVolumeClaim, out *api.PersistentVolumeClaim, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PersistentVolumeClaimSpec_To_api_PersistentVolumeClaimSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PersistentVolumeClaimStatus_To_api_PersistentVolumeClaimStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_PersistentVolumeClaim_To_api_PersistentVolumeClaim(in *PersistentVolumeClaim, out *api.PersistentVolumeClaim, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeClaim_To_api_PersistentVolumeClaim(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeClaimList_To_api_PersistentVolumeClaimList(in *PersistentVolumeClaimList, out *api.PersistentVolumeClaimList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.PersistentVolumeClaim, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_PersistentVolumeClaim_To_api_PersistentVolumeClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_PersistentVolumeClaimList_To_api_PersistentVolumeClaimList(in *PersistentVolumeClaimList, out *api.PersistentVolumeClaimList, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeClaimList_To_api_PersistentVolumeClaimList(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeClaimSpec_To_api_PersistentVolumeClaimSpec(in *PersistentVolumeClaimSpec, out *api.PersistentVolumeClaimSpec, s conversion.Scope) error {
	if in.AccessModes != nil {
		in, out := &in.AccessModes, &out.AccessModes
		*out = make([]api.PersistentVolumeAccessMode, len(*in))
		for i := range *in {
			(*out)[i] = api.PersistentVolumeAccessMode((*in)[i])
		}
	} else {
		out.AccessModes = nil
	}
	if err := Convert_v1beta3_ResourceRequirements_To_api_ResourceRequirements(&in.Resources, &out.Resources, s); err != nil {
		return err
	}
	out.VolumeName = in.VolumeName
	return nil
}

func Convert_v1beta3_PersistentVolumeClaimSpec_To_api_PersistentVolumeClaimSpec(in *PersistentVolumeClaimSpec, out *api.PersistentVolumeClaimSpec, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeClaimSpec_To_api_PersistentVolumeClaimSpec(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeClaimStatus_To_api_PersistentVolumeClaimStatus(in *PersistentVolumeClaimStatus, out *api.PersistentVolumeClaimStatus, s conversion.Scope) error {
	out.Phase = api.PersistentVolumeClaimPhase(in.Phase)
	if in.AccessModes != nil {
		in, out := &in.AccessModes, &out.AccessModes
		*out = make([]api.PersistentVolumeAccessMode, len(*in))
		for i := range *in {
			(*out)[i] = api.PersistentVolumeAccessMode((*in)[i])
		}
	} else {
		out.AccessModes = nil
	}
	if in.Capacity != nil {
		in, out := &in.Capacity, &out.Capacity
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Capacity = nil
	}
	return nil
}

func Convert_v1beta3_PersistentVolumeClaimStatus_To_api_PersistentVolumeClaimStatus(in *PersistentVolumeClaimStatus, out *api.PersistentVolumeClaimStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeClaimStatus_To_api_PersistentVolumeClaimStatus(in, out, s)
}

func autoConvert_api_PersistentVolumeClaimStatus_To_v1beta3_PersistentVolumeClaimStatus(in *api.PersistentVolumeClaimStatus, out *PersistentVolumeClaimStatus, s conversion.Scope) error {
	out.Phase = PersistentVolumeClaimPhase(in.Phase)
	if in.AccessModes != nil {
		in, out := &in.AccessModes, &out.AccessModes
		*out = make([]PersistentVolumeAccessMode, len(*in))
		for i := range *in {
			(*out)[i] = PersistentVolumeAccessMode((*in)[i])
		}
	} else {
		out.AccessModes = nil
	}
	if in.Capacity != nil {
		in, out := &in.Capacity, &out.Capacity
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Capacity = nil
	}
	return nil
}

func Convert_api_PersistentVolumeClaimStatus_To_v1beta3_PersistentVolumeClaimStatus(in *api.PersistentVolumeClaimStatus, out *PersistentVolumeClaimStatus, s conversion.Scope) error {
	return autoConvert_api_PersistentVolumeClaimStatus_To_v1beta3_PersistentVolumeClaimStatus(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeClaimVolumeSource_To_api_PersistentVolumeClaimVolumeSource(in *PersistentVolumeClaimVolumeSource, out *api.PersistentVolumeClaimVolumeSource, s conversion.Scope) error {
	out.ClaimName = in.ClaimName
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_PersistentVolumeClaimVolumeSource_To_api_PersistentVolumeClaimVolumeSource(in *PersistentVolumeClaimVolumeSource, out *api.PersistentVolumeClaimVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeClaimVolumeSource_To_api_PersistentVolumeClaimVolumeSource(in, out, s)
}

func autoConvert_api_PersistentVolumeClaimVolumeSource_To_v1beta3_PersistentVolumeClaimVolumeSource(in *api.PersistentVolumeClaimVolumeSource, out *PersistentVolumeClaimVolumeSource, s conversion.Scope) error {
	out.ClaimName = in.ClaimName
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_PersistentVolumeClaimVolumeSource_To_v1beta3_PersistentVolumeClaimVolumeSource(in *api.PersistentVolumeClaimVolumeSource, out *PersistentVolumeClaimVolumeSource, s conversion.Scope) error {
	return autoConvert_api_PersistentVolumeClaimVolumeSource_To_v1beta3_PersistentVolumeClaimVolumeSource(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeList_To_api_PersistentVolumeList(in *PersistentVolumeList, out *api.PersistentVolumeList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.PersistentVolume, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_PersistentVolume_To_api_PersistentVolume(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_PersistentVolumeList_To_api_PersistentVolumeList(in *PersistentVolumeList, out *api.PersistentVolumeList, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeList_To_api_PersistentVolumeList(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeSource_To_api_PersistentVolumeSource(in *PersistentVolumeSource, out *api.PersistentVolumeSource, s conversion.Scope) error {
	if in.GCEPersistentDisk != nil {
		in, out := &in.GCEPersistentDisk, &out.GCEPersistentDisk
		*out = new(api.GCEPersistentDiskVolumeSource)
		if err := Convert_v1beta3_GCEPersistentDiskVolumeSource_To_api_GCEPersistentDiskVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.GCEPersistentDisk = nil
	}
	if in.AWSElasticBlockStore != nil {
		in, out := &in.AWSElasticBlockStore, &out.AWSElasticBlockStore
		*out = new(api.AWSElasticBlockStoreVolumeSource)
		if err := Convert_v1beta3_AWSElasticBlockStoreVolumeSource_To_api_AWSElasticBlockStoreVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.AWSElasticBlockStore = nil
	}
	if in.HostPath != nil {
		in, out := &in.HostPath, &out.HostPath
		*out = new(api.HostPathVolumeSource)
		if err := Convert_v1beta3_HostPathVolumeSource_To_api_HostPathVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.HostPath = nil
	}
	if in.Glusterfs != nil {
		in, out := &in.Glusterfs, &out.Glusterfs
		*out = new(api.GlusterfsVolumeSource)
		if err := Convert_v1beta3_GlusterfsVolumeSource_To_api_GlusterfsVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Glusterfs = nil
	}
	if in.NFS != nil {
		in, out := &in.NFS, &out.NFS
		*out = new(api.NFSVolumeSource)
		if err := Convert_v1beta3_NFSVolumeSource_To_api_NFSVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NFS = nil
	}
	if in.RBD != nil {
		in, out := &in.RBD, &out.RBD
		*out = new(api.RBDVolumeSource)
		if err := Convert_v1beta3_RBDVolumeSource_To_api_RBDVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.RBD = nil
	}
	if in.ISCSI != nil {
		in, out := &in.ISCSI, &out.ISCSI
		*out = new(api.ISCSIVolumeSource)
		if err := Convert_v1beta3_ISCSIVolumeSource_To_api_ISCSIVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ISCSI = nil
	}
	if in.CephFS != nil {
		in, out := &in.CephFS, &out.CephFS
		*out = new(api.CephFSVolumeSource)
		if err := Convert_v1beta3_CephFSVolumeSource_To_api_CephFSVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.CephFS = nil
	}
	if in.Cinder != nil {
		in, out := &in.Cinder, &out.Cinder
		*out = new(api.CinderVolumeSource)
		if err := Convert_v1beta3_CinderVolumeSource_To_api_CinderVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Cinder = nil
	}
	if in.FC != nil {
		in, out := &in.FC, &out.FC
		*out = new(api.FCVolumeSource)
		if err := Convert_v1beta3_FCVolumeSource_To_api_FCVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.FC = nil
	}
	if in.Flocker != nil {
		in, out := &in.Flocker, &out.Flocker
		*out = new(api.FlockerVolumeSource)
		if err := Convert_v1beta3_FlockerVolumeSource_To_api_FlockerVolumeSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Flocker = nil
	}
	return nil
}

func Convert_v1beta3_PersistentVolumeSource_To_api_PersistentVolumeSource(in *PersistentVolumeSource, out *api.PersistentVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeSource_To_api_PersistentVolumeSource(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeSpec_To_api_PersistentVolumeSpec(in *PersistentVolumeSpec, out *api.PersistentVolumeSpec, s conversion.Scope) error {
	if in.Capacity != nil {
		in, out := &in.Capacity, &out.Capacity
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Capacity = nil
	}
	if err := Convert_v1beta3_PersistentVolumeSource_To_api_PersistentVolumeSource(&in.PersistentVolumeSource, &out.PersistentVolumeSource, s); err != nil {
		return err
	}
	if in.AccessModes != nil {
		in, out := &in.AccessModes, &out.AccessModes
		*out = make([]api.PersistentVolumeAccessMode, len(*in))
		for i := range *in {
			(*out)[i] = api.PersistentVolumeAccessMode((*in)[i])
		}
	} else {
		out.AccessModes = nil
	}
	if in.ClaimRef != nil {
		in, out := &in.ClaimRef, &out.ClaimRef
		*out = new(api.ObjectReference)
		if err := Convert_v1beta3_ObjectReference_To_api_ObjectReference(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ClaimRef = nil
	}
	out.PersistentVolumeReclaimPolicy = api.PersistentVolumeReclaimPolicy(in.PersistentVolumeReclaimPolicy)
	return nil
}

func Convert_v1beta3_PersistentVolumeSpec_To_api_PersistentVolumeSpec(in *PersistentVolumeSpec, out *api.PersistentVolumeSpec, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeSpec_To_api_PersistentVolumeSpec(in, out, s)
}

func autoConvert_v1beta3_PersistentVolumeStatus_To_api_PersistentVolumeStatus(in *PersistentVolumeStatus, out *api.PersistentVolumeStatus, s conversion.Scope) error {
	out.Phase = api.PersistentVolumePhase(in.Phase)
	out.Message = in.Message
	out.Reason = in.Reason
	return nil
}

func Convert_v1beta3_PersistentVolumeStatus_To_api_PersistentVolumeStatus(in *PersistentVolumeStatus, out *api.PersistentVolumeStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_PersistentVolumeStatus_To_api_PersistentVolumeStatus(in, out, s)
}

func autoConvert_api_PersistentVolumeStatus_To_v1beta3_PersistentVolumeStatus(in *api.PersistentVolumeStatus, out *PersistentVolumeStatus, s conversion.Scope) error {
	out.Phase = PersistentVolumePhase(in.Phase)
	out.Message = in.Message
	out.Reason = in.Reason
	return nil
}

func Convert_api_PersistentVolumeStatus_To_v1beta3_PersistentVolumeStatus(in *api.PersistentVolumeStatus, out *PersistentVolumeStatus, s conversion.Scope) error {
	return autoConvert_api_PersistentVolumeStatus_To_v1beta3_PersistentVolumeStatus(in, out, s)
}

func autoConvert_v1beta3_Pod_To_api_Pod(in *Pod, out *api.Pod, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PodSpec_To_api_PodSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PodStatus_To_api_PodStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_Pod_To_api_Pod(in *Pod, out *api.Pod, s conversion.Scope) error {
	return autoConvert_v1beta3_Pod_To_api_Pod(in, out, s)
}

func autoConvert_v1beta3_PodAttachOptions_To_api_PodAttachOptions(in *PodAttachOptions, out *api.PodAttachOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Stdin = in.Stdin
	out.Stdout = in.Stdout
	out.Stderr = in.Stderr
	out.TTY = in.TTY
	out.Container = in.Container
	return nil
}

func Convert_v1beta3_PodAttachOptions_To_api_PodAttachOptions(in *PodAttachOptions, out *api.PodAttachOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_PodAttachOptions_To_api_PodAttachOptions(in, out, s)
}

func autoConvert_api_PodAttachOptions_To_v1beta3_PodAttachOptions(in *api.PodAttachOptions, out *PodAttachOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Stdin = in.Stdin
	out.Stdout = in.Stdout
	out.Stderr = in.Stderr
	out.TTY = in.TTY
	out.Container = in.Container
	return nil
}

func Convert_api_PodAttachOptions_To_v1beta3_PodAttachOptions(in *api.PodAttachOptions, out *PodAttachOptions, s conversion.Scope) error {
	return autoConvert_api_PodAttachOptions_To_v1beta3_PodAttachOptions(in, out, s)
}

func autoConvert_v1beta3_PodCondition_To_api_PodCondition(in *PodCondition, out *api.PodCondition, s conversion.Scope) error {
	out.Type = api.PodConditionType(in.Type)
	out.Status = api.ConditionStatus(in.Status)
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastProbeTime, &out.LastProbeTime, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastTransitionTime, &out.LastTransitionTime, s); err != nil {
		return err
	}
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

func Convert_v1beta3_PodCondition_To_api_PodCondition(in *PodCondition, out *api.PodCondition, s conversion.Scope) error {
	return autoConvert_v1beta3_PodCondition_To_api_PodCondition(in, out, s)
}

func autoConvert_api_PodCondition_To_v1beta3_PodCondition(in *api.PodCondition, out *PodCondition, s conversion.Scope) error {
	out.Type = PodConditionType(in.Type)
	out.Status = ConditionStatus(in.Status)
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastProbeTime, &out.LastProbeTime, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_Time_To_unversioned_Time(&in.LastTransitionTime, &out.LastTransitionTime, s); err != nil {
		return err
	}
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

func Convert_api_PodCondition_To_v1beta3_PodCondition(in *api.PodCondition, out *PodCondition, s conversion.Scope) error {
	return autoConvert_api_PodCondition_To_v1beta3_PodCondition(in, out, s)
}

func autoConvert_v1beta3_PodExecOptions_To_api_PodExecOptions(in *PodExecOptions, out *api.PodExecOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Stdin = in.Stdin
	out.Stdout = in.Stdout
	out.Stderr = in.Stderr
	out.TTY = in.TTY
	out.Container = in.Container
	out.Command = in.Command
	return nil
}

func Convert_v1beta3_PodExecOptions_To_api_PodExecOptions(in *PodExecOptions, out *api.PodExecOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_PodExecOptions_To_api_PodExecOptions(in, out, s)
}

func autoConvert_api_PodExecOptions_To_v1beta3_PodExecOptions(in *api.PodExecOptions, out *PodExecOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Stdin = in.Stdin
	out.Stdout = in.Stdout
	out.Stderr = in.Stderr
	out.TTY = in.TTY
	out.Container = in.Container
	out.Command = in.Command
	return nil
}

func Convert_api_PodExecOptions_To_v1beta3_PodExecOptions(in *api.PodExecOptions, out *PodExecOptions, s conversion.Scope) error {
	return autoConvert_api_PodExecOptions_To_v1beta3_PodExecOptions(in, out, s)
}

func autoConvert_v1beta3_PodList_To_api_PodList(in *PodList, out *api.PodList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Pod, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_Pod_To_api_Pod(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_PodList_To_api_PodList(in *PodList, out *api.PodList, s conversion.Scope) error {
	return autoConvert_v1beta3_PodList_To_api_PodList(in, out, s)
}

func autoConvert_v1beta3_PodLogOptions_To_api_PodLogOptions(in *PodLogOptions, out *api.PodLogOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Container = in.Container
	out.Follow = in.Follow
	out.Previous = in.Previous
	out.SinceSeconds = in.SinceSeconds
	out.SinceTime = in.SinceTime
	out.Timestamps = in.Timestamps
	out.TailLines = in.TailLines
	out.LimitBytes = in.LimitBytes
	return nil
}

func Convert_v1beta3_PodLogOptions_To_api_PodLogOptions(in *PodLogOptions, out *api.PodLogOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_PodLogOptions_To_api_PodLogOptions(in, out, s)
}

func autoConvert_api_PodLogOptions_To_v1beta3_PodLogOptions(in *api.PodLogOptions, out *PodLogOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Container = in.Container
	out.Follow = in.Follow
	out.Previous = in.Previous
	out.SinceSeconds = in.SinceSeconds
	out.SinceTime = in.SinceTime
	out.Timestamps = in.Timestamps
	out.TailLines = in.TailLines
	out.LimitBytes = in.LimitBytes
	return nil
}

func Convert_api_PodLogOptions_To_v1beta3_PodLogOptions(in *api.PodLogOptions, out *PodLogOptions, s conversion.Scope) error {
	return autoConvert_api_PodLogOptions_To_v1beta3_PodLogOptions(in, out, s)
}

func autoConvert_v1beta3_PodProxyOptions_To_api_PodProxyOptions(in *PodProxyOptions, out *api.PodProxyOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Path = in.Path
	return nil
}

func Convert_v1beta3_PodProxyOptions_To_api_PodProxyOptions(in *PodProxyOptions, out *api.PodProxyOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_PodProxyOptions_To_api_PodProxyOptions(in, out, s)
}

func autoConvert_api_PodProxyOptions_To_v1beta3_PodProxyOptions(in *api.PodProxyOptions, out *PodProxyOptions, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	out.Path = in.Path
	return nil
}

func Convert_api_PodProxyOptions_To_v1beta3_PodProxyOptions(in *api.PodProxyOptions, out *PodProxyOptions, s conversion.Scope) error {
	return autoConvert_api_PodProxyOptions_To_v1beta3_PodProxyOptions(in, out, s)
}

func autoConvert_v1beta3_PodSecurityContext_To_api_PodSecurityContext(in *PodSecurityContext, out *api.PodSecurityContext, s conversion.Scope) error {
	if in.SELinuxOptions != nil {
		in, out := &in.SELinuxOptions, &out.SELinuxOptions
		*out = new(api.SELinuxOptions)
		if err := Convert_v1beta3_SELinuxOptions_To_api_SELinuxOptions(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.SELinuxOptions = nil
	}
	out.RunAsUser = in.RunAsUser
	out.RunAsNonRoot = in.RunAsNonRoot
	out.SupplementalGroups = in.SupplementalGroups
	out.FSGroup = in.FSGroup
	return nil
}

func autoConvert_v1beta3_PodStatus_To_api_PodStatus(in *PodStatus, out *api.PodStatus, s conversion.Scope) error {
	out.Phase = api.PodPhase(in.Phase)
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]api.PodCondition, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_PodCondition_To_api_PodCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	out.Message = in.Message
	out.Reason = in.Reason
	out.HostIP = in.HostIP
	out.PodIP = in.PodIP
	out.StartTime = in.StartTime
	if in.ContainerStatuses != nil {
		in, out := &in.ContainerStatuses, &out.ContainerStatuses
		*out = make([]api.ContainerStatus, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_ContainerStatus_To_api_ContainerStatus(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ContainerStatuses = nil
	}
	return nil
}

func Convert_v1beta3_PodStatus_To_api_PodStatus(in *PodStatus, out *api.PodStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_PodStatus_To_api_PodStatus(in, out, s)
}

func autoConvert_v1beta3_PodStatusResult_To_api_PodStatusResult(in *PodStatusResult, out *api.PodStatusResult, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PodStatus_To_api_PodStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_PodStatusResult_To_api_PodStatusResult(in *PodStatusResult, out *api.PodStatusResult, s conversion.Scope) error {
	return autoConvert_v1beta3_PodStatusResult_To_api_PodStatusResult(in, out, s)
}

func autoConvert_v1beta3_PodTemplate_To_api_PodTemplate(in *PodTemplate, out *api.PodTemplate, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PodTemplateSpec_To_api_PodTemplateSpec(&in.Template, &out.Template, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_PodTemplate_To_api_PodTemplate(in *PodTemplate, out *api.PodTemplate, s conversion.Scope) error {
	return autoConvert_v1beta3_PodTemplate_To_api_PodTemplate(in, out, s)
}

func autoConvert_v1beta3_PodTemplateList_To_api_PodTemplateList(in *PodTemplateList, out *api.PodTemplateList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.PodTemplate, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_PodTemplate_To_api_PodTemplate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_PodTemplateList_To_api_PodTemplateList(in *PodTemplateList, out *api.PodTemplateList, s conversion.Scope) error {
	return autoConvert_v1beta3_PodTemplateList_To_api_PodTemplateList(in, out, s)
}

func autoConvert_v1beta3_PodTemplateSpec_To_api_PodTemplateSpec(in *PodTemplateSpec, out *api.PodTemplateSpec, s conversion.Scope) error {
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_PodSpec_To_api_PodSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_PodTemplateSpec_To_api_PodTemplateSpec(in *PodTemplateSpec, out *api.PodTemplateSpec, s conversion.Scope) error {
	return autoConvert_v1beta3_PodTemplateSpec_To_api_PodTemplateSpec(in, out, s)
}

func autoConvert_v1beta3_Probe_To_api_Probe(in *Probe, out *api.Probe, s conversion.Scope) error {
	if err := Convert_v1beta3_Handler_To_api_Handler(&in.Handler, &out.Handler, s); err != nil {
		return err
	}
	out.InitialDelaySeconds = int32(in.InitialDelaySeconds)
	out.TimeoutSeconds = int32(in.TimeoutSeconds)
	return nil
}

func Convert_v1beta3_Probe_To_api_Probe(in *Probe, out *api.Probe, s conversion.Scope) error {
	return autoConvert_v1beta3_Probe_To_api_Probe(in, out, s)
}

func autoConvert_v1beta3_RBDVolumeSource_To_api_RBDVolumeSource(in *RBDVolumeSource, out *api.RBDVolumeSource, s conversion.Scope) error {
	out.CephMonitors = in.CephMonitors
	out.RBDImage = in.RBDImage
	out.FSType = in.FSType
	out.RBDPool = in.RBDPool
	out.RadosUser = in.RadosUser
	out.Keyring = in.Keyring
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(api.LocalObjectReference)
		if err := Convert_v1beta3_LocalObjectReference_To_api_LocalObjectReference(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.SecretRef = nil
	}
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_v1beta3_RBDVolumeSource_To_api_RBDVolumeSource(in *RBDVolumeSource, out *api.RBDVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_RBDVolumeSource_To_api_RBDVolumeSource(in, out, s)
}

func autoConvert_api_RBDVolumeSource_To_v1beta3_RBDVolumeSource(in *api.RBDVolumeSource, out *RBDVolumeSource, s conversion.Scope) error {
	out.CephMonitors = in.CephMonitors
	out.RBDImage = in.RBDImage
	out.FSType = in.FSType
	out.RBDPool = in.RBDPool
	out.RadosUser = in.RadosUser
	out.Keyring = in.Keyring
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(LocalObjectReference)
		if err := Convert_api_LocalObjectReference_To_v1beta3_LocalObjectReference(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.SecretRef = nil
	}
	out.ReadOnly = in.ReadOnly
	return nil
}

func Convert_api_RBDVolumeSource_To_v1beta3_RBDVolumeSource(in *api.RBDVolumeSource, out *RBDVolumeSource, s conversion.Scope) error {
	return autoConvert_api_RBDVolumeSource_To_v1beta3_RBDVolumeSource(in, out, s)
}

func autoConvert_v1beta3_RangeAllocation_To_api_RangeAllocation(in *RangeAllocation, out *api.RangeAllocation, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	out.Range = in.Range
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.Data, &out.Data, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_RangeAllocation_To_api_RangeAllocation(in *RangeAllocation, out *api.RangeAllocation, s conversion.Scope) error {
	return autoConvert_v1beta3_RangeAllocation_To_api_RangeAllocation(in, out, s)
}

func autoConvert_v1beta3_ReplicationController_To_api_ReplicationController(in *ReplicationController, out *api.ReplicationController, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ReplicationControllerSpec_To_api_ReplicationControllerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ReplicationControllerStatus_To_api_ReplicationControllerStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_ReplicationController_To_api_ReplicationController(in *ReplicationController, out *api.ReplicationController, s conversion.Scope) error {
	return autoConvert_v1beta3_ReplicationController_To_api_ReplicationController(in, out, s)
}

func autoConvert_v1beta3_ReplicationControllerList_To_api_ReplicationControllerList(in *ReplicationControllerList, out *api.ReplicationControllerList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.ReplicationController, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_ReplicationController_To_api_ReplicationController(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_ReplicationControllerList_To_api_ReplicationControllerList(in *ReplicationControllerList, out *api.ReplicationControllerList, s conversion.Scope) error {
	return autoConvert_v1beta3_ReplicationControllerList_To_api_ReplicationControllerList(in, out, s)
}

func autoConvert_v1beta3_ReplicationControllerStatus_To_api_ReplicationControllerStatus(in *ReplicationControllerStatus, out *api.ReplicationControllerStatus, s conversion.Scope) error {
	out.Replicas = int32(in.Replicas)
	out.ObservedGeneration = in.ObservedGeneration
	return nil
}

func Convert_v1beta3_ReplicationControllerStatus_To_api_ReplicationControllerStatus(in *ReplicationControllerStatus, out *api.ReplicationControllerStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_ReplicationControllerStatus_To_api_ReplicationControllerStatus(in, out, s)
}

func autoConvert_v1beta3_ResourceQuota_To_api_ResourceQuota(in *ResourceQuota, out *api.ResourceQuota, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ResourceQuotaSpec_To_api_ResourceQuotaSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ResourceQuotaStatus_To_api_ResourceQuotaStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_ResourceQuota_To_api_ResourceQuota(in *ResourceQuota, out *api.ResourceQuota, s conversion.Scope) error {
	return autoConvert_v1beta3_ResourceQuota_To_api_ResourceQuota(in, out, s)
}

func autoConvert_v1beta3_ResourceQuotaList_To_api_ResourceQuotaList(in *ResourceQuotaList, out *api.ResourceQuotaList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.ResourceQuota, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_ResourceQuota_To_api_ResourceQuota(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_ResourceQuotaList_To_api_ResourceQuotaList(in *ResourceQuotaList, out *api.ResourceQuotaList, s conversion.Scope) error {
	return autoConvert_v1beta3_ResourceQuotaList_To_api_ResourceQuotaList(in, out, s)
}

func autoConvert_v1beta3_ResourceQuotaSpec_To_api_ResourceQuotaSpec(in *ResourceQuotaSpec, out *api.ResourceQuotaSpec, s conversion.Scope) error {
	if in.Hard != nil {
		in, out := &in.Hard, &out.Hard
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Hard = nil
	}
	return nil
}

func Convert_v1beta3_ResourceQuotaSpec_To_api_ResourceQuotaSpec(in *ResourceQuotaSpec, out *api.ResourceQuotaSpec, s conversion.Scope) error {
	return autoConvert_v1beta3_ResourceQuotaSpec_To_api_ResourceQuotaSpec(in, out, s)
}

func autoConvert_v1beta3_ResourceQuotaStatus_To_api_ResourceQuotaStatus(in *ResourceQuotaStatus, out *api.ResourceQuotaStatus, s conversion.Scope) error {
	if in.Hard != nil {
		in, out := &in.Hard, &out.Hard
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Hard = nil
	}
	if in.Used != nil {
		in, out := &in.Used, &out.Used
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Used = nil
	}
	return nil
}

func Convert_v1beta3_ResourceQuotaStatus_To_api_ResourceQuotaStatus(in *ResourceQuotaStatus, out *api.ResourceQuotaStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_ResourceQuotaStatus_To_api_ResourceQuotaStatus(in, out, s)
}

func autoConvert_api_ResourceQuotaStatus_To_v1beta3_ResourceQuotaStatus(in *api.ResourceQuotaStatus, out *ResourceQuotaStatus, s conversion.Scope) error {
	if in.Hard != nil {
		in, out := &in.Hard, &out.Hard
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Hard = nil
	}
	if in.Used != nil {
		in, out := &in.Used, &out.Used
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Used = nil
	}
	return nil
}

func Convert_api_ResourceQuotaStatus_To_v1beta3_ResourceQuotaStatus(in *api.ResourceQuotaStatus, out *ResourceQuotaStatus, s conversion.Scope) error {
	return autoConvert_api_ResourceQuotaStatus_To_v1beta3_ResourceQuotaStatus(in, out, s)
}

func autoConvert_v1beta3_ResourceRequirements_To_api_ResourceRequirements(in *ResourceRequirements, out *api.ResourceRequirements, s conversion.Scope) error {
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Limits = nil
	}
	if in.Requests != nil {
		in, out := &in.Requests, &out.Requests
		*out = make(api.ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[api.ResourceName(key)] = *newVal
		}
	} else {
		out.Requests = nil
	}
	return nil
}

func Convert_v1beta3_ResourceRequirements_To_api_ResourceRequirements(in *ResourceRequirements, out *api.ResourceRequirements, s conversion.Scope) error {
	return autoConvert_v1beta3_ResourceRequirements_To_api_ResourceRequirements(in, out, s)
}

func autoConvert_api_ResourceRequirements_To_v1beta3_ResourceRequirements(in *api.ResourceRequirements, out *ResourceRequirements, s conversion.Scope) error {
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Limits = nil
	}
	if in.Requests != nil {
		in, out := &in.Requests, &out.Requests
		*out = make(ResourceList, len(*in))
		for key, val := range *in {
			newVal := new(resource.Quantity)
			if err := api.Convert_resource_Quantity_To_resource_Quantity(&val, newVal, s); err != nil {
				return err
			}
			(*out)[ResourceName(key)] = *newVal
		}
	} else {
		out.Requests = nil
	}
	return nil
}

func Convert_api_ResourceRequirements_To_v1beta3_ResourceRequirements(in *api.ResourceRequirements, out *ResourceRequirements, s conversion.Scope) error {
	return autoConvert_api_ResourceRequirements_To_v1beta3_ResourceRequirements(in, out, s)
}

func autoConvert_v1beta3_RunAsUserStrategyOptions_To_api_RunAsUserStrategyOptions(in *RunAsUserStrategyOptions, out *api.RunAsUserStrategyOptions, s conversion.Scope) error {
	out.Type = api.RunAsUserStrategyType(in.Type)
	out.UID = in.UID
	out.UIDRangeMin = in.UIDRangeMin
	out.UIDRangeMax = in.UIDRangeMax
	return nil
}

func Convert_v1beta3_RunAsUserStrategyOptions_To_api_RunAsUserStrategyOptions(in *RunAsUserStrategyOptions, out *api.RunAsUserStrategyOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_RunAsUserStrategyOptions_To_api_RunAsUserStrategyOptions(in, out, s)
}

func autoConvert_api_RunAsUserStrategyOptions_To_v1beta3_RunAsUserStrategyOptions(in *api.RunAsUserStrategyOptions, out *RunAsUserStrategyOptions, s conversion.Scope) error {
	out.Type = RunAsUserStrategyType(in.Type)
	out.UID = in.UID
	out.UIDRangeMin = in.UIDRangeMin
	out.UIDRangeMax = in.UIDRangeMax
	return nil
}

func Convert_api_RunAsUserStrategyOptions_To_v1beta3_RunAsUserStrategyOptions(in *api.RunAsUserStrategyOptions, out *RunAsUserStrategyOptions, s conversion.Scope) error {
	return autoConvert_api_RunAsUserStrategyOptions_To_v1beta3_RunAsUserStrategyOptions(in, out, s)
}

func autoConvert_v1beta3_SELinuxContextStrategyOptions_To_api_SELinuxContextStrategyOptions(in *SELinuxContextStrategyOptions, out *api.SELinuxContextStrategyOptions, s conversion.Scope) error {
	out.Type = api.SELinuxContextStrategyType(in.Type)
	if in.SELinuxOptions != nil {
		in, out := &in.SELinuxOptions, &out.SELinuxOptions
		*out = new(api.SELinuxOptions)
		if err := Convert_v1beta3_SELinuxOptions_To_api_SELinuxOptions(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.SELinuxOptions = nil
	}
	return nil
}

func Convert_v1beta3_SELinuxContextStrategyOptions_To_api_SELinuxContextStrategyOptions(in *SELinuxContextStrategyOptions, out *api.SELinuxContextStrategyOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_SELinuxContextStrategyOptions_To_api_SELinuxContextStrategyOptions(in, out, s)
}

func autoConvert_api_SELinuxContextStrategyOptions_To_v1beta3_SELinuxContextStrategyOptions(in *api.SELinuxContextStrategyOptions, out *SELinuxContextStrategyOptions, s conversion.Scope) error {
	out.Type = SELinuxContextStrategyType(in.Type)
	if in.SELinuxOptions != nil {
		in, out := &in.SELinuxOptions, &out.SELinuxOptions
		*out = new(SELinuxOptions)
		if err := Convert_api_SELinuxOptions_To_v1beta3_SELinuxOptions(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.SELinuxOptions = nil
	}
	return nil
}

func Convert_api_SELinuxContextStrategyOptions_To_v1beta3_SELinuxContextStrategyOptions(in *api.SELinuxContextStrategyOptions, out *SELinuxContextStrategyOptions, s conversion.Scope) error {
	return autoConvert_api_SELinuxContextStrategyOptions_To_v1beta3_SELinuxContextStrategyOptions(in, out, s)
}

func autoConvert_v1beta3_SELinuxOptions_To_api_SELinuxOptions(in *SELinuxOptions, out *api.SELinuxOptions, s conversion.Scope) error {
	out.User = in.User
	out.Role = in.Role
	out.Type = in.Type
	out.Level = in.Level
	return nil
}

func Convert_v1beta3_SELinuxOptions_To_api_SELinuxOptions(in *SELinuxOptions, out *api.SELinuxOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_SELinuxOptions_To_api_SELinuxOptions(in, out, s)
}

func autoConvert_api_SELinuxOptions_To_v1beta3_SELinuxOptions(in *api.SELinuxOptions, out *SELinuxOptions, s conversion.Scope) error {
	out.User = in.User
	out.Role = in.Role
	out.Type = in.Type
	out.Level = in.Level
	return nil
}

func Convert_api_SELinuxOptions_To_v1beta3_SELinuxOptions(in *api.SELinuxOptions, out *SELinuxOptions, s conversion.Scope) error {
	return autoConvert_api_SELinuxOptions_To_v1beta3_SELinuxOptions(in, out, s)
}

func autoConvert_v1beta3_Secret_To_api_Secret(in *Secret, out *api.Secret, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	out.Data = in.Data
	out.Type = api.SecretType(in.Type)
	return nil
}

func Convert_v1beta3_Secret_To_api_Secret(in *Secret, out *api.Secret, s conversion.Scope) error {
	return autoConvert_v1beta3_Secret_To_api_Secret(in, out, s)
}

func autoConvert_v1beta3_SecretList_To_api_SecretList(in *SecretList, out *api.SecretList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Secret, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_Secret_To_api_Secret(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_SecretList_To_api_SecretList(in *SecretList, out *api.SecretList, s conversion.Scope) error {
	return autoConvert_v1beta3_SecretList_To_api_SecretList(in, out, s)
}

func autoConvert_v1beta3_SecretVolumeSource_To_api_SecretVolumeSource(in *SecretVolumeSource, out *api.SecretVolumeSource, s conversion.Scope) error {
	out.SecretName = in.SecretName
	return nil
}

func Convert_v1beta3_SecretVolumeSource_To_api_SecretVolumeSource(in *SecretVolumeSource, out *api.SecretVolumeSource, s conversion.Scope) error {
	return autoConvert_v1beta3_SecretVolumeSource_To_api_SecretVolumeSource(in, out, s)
}

func autoConvert_v1beta3_SecurityContext_To_api_SecurityContext(in *SecurityContext, out *api.SecurityContext, s conversion.Scope) error {
	if in.Capabilities != nil {
		in, out := &in.Capabilities, &out.Capabilities
		*out = new(api.Capabilities)
		if err := Convert_v1beta3_Capabilities_To_api_Capabilities(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Capabilities = nil
	}
	out.Privileged = in.Privileged
	if in.SELinuxOptions != nil {
		in, out := &in.SELinuxOptions, &out.SELinuxOptions
		*out = new(api.SELinuxOptions)
		if err := Convert_v1beta3_SELinuxOptions_To_api_SELinuxOptions(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.SELinuxOptions = nil
	}
	out.RunAsUser = in.RunAsUser
	out.RunAsNonRoot = in.RunAsNonRoot
	return nil
}

func Convert_v1beta3_SecurityContext_To_api_SecurityContext(in *SecurityContext, out *api.SecurityContext, s conversion.Scope) error {
	return autoConvert_v1beta3_SecurityContext_To_api_SecurityContext(in, out, s)
}

func autoConvert_v1beta3_SecurityContextConstraintsList_To_api_SecurityContextConstraintsList(in *SecurityContextConstraintsList, out *api.SecurityContextConstraintsList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.SecurityContextConstraints, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_SecurityContextConstraints_To_api_SecurityContextConstraints(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_SecurityContextConstraintsList_To_api_SecurityContextConstraintsList(in *SecurityContextConstraintsList, out *api.SecurityContextConstraintsList, s conversion.Scope) error {
	return autoConvert_v1beta3_SecurityContextConstraintsList_To_api_SecurityContextConstraintsList(in, out, s)
}

func autoConvert_api_SecurityContextConstraintsList_To_v1beta3_SecurityContextConstraintsList(in *api.SecurityContextConstraintsList, out *SecurityContextConstraintsList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_unversioned_ListMeta_To_v1beta3_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecurityContextConstraints, len(*in))
		for i := range *in {
			if err := Convert_api_SecurityContextConstraints_To_v1beta3_SecurityContextConstraints(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_SecurityContextConstraintsList_To_v1beta3_SecurityContextConstraintsList(in *api.SecurityContextConstraintsList, out *SecurityContextConstraintsList, s conversion.Scope) error {
	return autoConvert_api_SecurityContextConstraintsList_To_v1beta3_SecurityContextConstraintsList(in, out, s)
}

func autoConvert_v1beta3_SerializedReference_To_api_SerializedReference(in *SerializedReference, out *api.SerializedReference, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectReference_To_api_ObjectReference(&in.Reference, &out.Reference, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_SerializedReference_To_api_SerializedReference(in *SerializedReference, out *api.SerializedReference, s conversion.Scope) error {
	return autoConvert_v1beta3_SerializedReference_To_api_SerializedReference(in, out, s)
}

func autoConvert_api_SerializedReference_To_v1beta3_SerializedReference(in *api.SerializedReference, out *SerializedReference, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_api_ObjectReference_To_v1beta3_ObjectReference(&in.Reference, &out.Reference, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_SerializedReference_To_v1beta3_SerializedReference(in *api.SerializedReference, out *SerializedReference, s conversion.Scope) error {
	return autoConvert_api_SerializedReference_To_v1beta3_SerializedReference(in, out, s)
}

func autoConvert_v1beta3_Service_To_api_Service(in *Service, out *api.Service, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ServiceSpec_To_api_ServiceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ServiceStatus_To_api_ServiceStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_Service_To_api_Service(in *Service, out *api.Service, s conversion.Scope) error {
	return autoConvert_v1beta3_Service_To_api_Service(in, out, s)
}

func autoConvert_v1beta3_ServiceAccount_To_api_ServiceAccount(in *ServiceAccount, out *api.ServiceAccount, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make([]api.ObjectReference, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_ObjectReference_To_api_ObjectReference(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Secrets = nil
	}
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]api.LocalObjectReference, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_LocalObjectReference_To_api_LocalObjectReference(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ImagePullSecrets = nil
	}
	return nil
}

func Convert_v1beta3_ServiceAccount_To_api_ServiceAccount(in *ServiceAccount, out *api.ServiceAccount, s conversion.Scope) error {
	return autoConvert_v1beta3_ServiceAccount_To_api_ServiceAccount(in, out, s)
}

func autoConvert_v1beta3_ServiceAccountList_To_api_ServiceAccountList(in *ServiceAccountList, out *api.ServiceAccountList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.ServiceAccount, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_ServiceAccount_To_api_ServiceAccount(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_ServiceAccountList_To_api_ServiceAccountList(in *ServiceAccountList, out *api.ServiceAccountList, s conversion.Scope) error {
	return autoConvert_v1beta3_ServiceAccountList_To_api_ServiceAccountList(in, out, s)
}

func autoConvert_v1beta3_ServiceList_To_api_ServiceList(in *ServiceList, out *api.ServiceList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := Convert_v1beta3_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.Service, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_Service_To_api_Service(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta3_ServiceList_To_api_ServiceList(in *ServiceList, out *api.ServiceList, s conversion.Scope) error {
	return autoConvert_v1beta3_ServiceList_To_api_ServiceList(in, out, s)
}

func autoConvert_v1beta3_ServicePort_To_api_ServicePort(in *ServicePort, out *api.ServicePort, s conversion.Scope) error {
	out.Name = in.Name
	out.Protocol = api.Protocol(in.Protocol)
	out.Port = int32(in.Port)
	if err := api.Convert_intstr_IntOrString_To_intstr_IntOrString(&in.TargetPort, &out.TargetPort, s); err != nil {
		return err
	}
	out.NodePort = int32(in.NodePort)
	return nil
}

func Convert_v1beta3_ServicePort_To_api_ServicePort(in *ServicePort, out *api.ServicePort, s conversion.Scope) error {
	return autoConvert_v1beta3_ServicePort_To_api_ServicePort(in, out, s)
}

func autoConvert_api_ServicePort_To_v1beta3_ServicePort(in *api.ServicePort, out *ServicePort, s conversion.Scope) error {
	out.Name = in.Name
	out.Protocol = Protocol(in.Protocol)
	out.Port = int(in.Port)
	if err := api.Convert_intstr_IntOrString_To_intstr_IntOrString(&in.TargetPort, &out.TargetPort, s); err != nil {
		return err
	}
	out.NodePort = int(in.NodePort)
	return nil
}

func Convert_api_ServicePort_To_v1beta3_ServicePort(in *api.ServicePort, out *ServicePort, s conversion.Scope) error {
	return autoConvert_api_ServicePort_To_v1beta3_ServicePort(in, out, s)
}

func autoConvert_v1beta3_ServiceStatus_To_api_ServiceStatus(in *ServiceStatus, out *api.ServiceStatus, s conversion.Scope) error {
	if err := Convert_v1beta3_LoadBalancerStatus_To_api_LoadBalancerStatus(&in.LoadBalancer, &out.LoadBalancer, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_ServiceStatus_To_api_ServiceStatus(in *ServiceStatus, out *api.ServiceStatus, s conversion.Scope) error {
	return autoConvert_v1beta3_ServiceStatus_To_api_ServiceStatus(in, out, s)
}

func autoConvert_api_ServiceStatus_To_v1beta3_ServiceStatus(in *api.ServiceStatus, out *ServiceStatus, s conversion.Scope) error {
	if err := Convert_api_LoadBalancerStatus_To_v1beta3_LoadBalancerStatus(&in.LoadBalancer, &out.LoadBalancer, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_ServiceStatus_To_v1beta3_ServiceStatus(in *api.ServiceStatus, out *ServiceStatus, s conversion.Scope) error {
	return autoConvert_api_ServiceStatus_To_v1beta3_ServiceStatus(in, out, s)
}

func autoConvert_v1beta3_SupplementalGroupsStrategyOptions_To_api_SupplementalGroupsStrategyOptions(in *SupplementalGroupsStrategyOptions, out *api.SupplementalGroupsStrategyOptions, s conversion.Scope) error {
	out.Type = api.SupplementalGroupsStrategyType(in.Type)
	if in.Ranges != nil {
		in, out := &in.Ranges, &out.Ranges
		*out = make([]api.IDRange, len(*in))
		for i := range *in {
			if err := Convert_v1beta3_IDRange_To_api_IDRange(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ranges = nil
	}
	return nil
}

func Convert_v1beta3_SupplementalGroupsStrategyOptions_To_api_SupplementalGroupsStrategyOptions(in *SupplementalGroupsStrategyOptions, out *api.SupplementalGroupsStrategyOptions, s conversion.Scope) error {
	return autoConvert_v1beta3_SupplementalGroupsStrategyOptions_To_api_SupplementalGroupsStrategyOptions(in, out, s)
}

func autoConvert_api_SupplementalGroupsStrategyOptions_To_v1beta3_SupplementalGroupsStrategyOptions(in *api.SupplementalGroupsStrategyOptions, out *SupplementalGroupsStrategyOptions, s conversion.Scope) error {
	out.Type = SupplementalGroupsStrategyType(in.Type)
	if in.Ranges != nil {
		in, out := &in.Ranges, &out.Ranges
		*out = make([]IDRange, len(*in))
		for i := range *in {
			if err := Convert_api_IDRange_To_v1beta3_IDRange(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ranges = nil
	}
	return nil
}

func Convert_api_SupplementalGroupsStrategyOptions_To_v1beta3_SupplementalGroupsStrategyOptions(in *api.SupplementalGroupsStrategyOptions, out *SupplementalGroupsStrategyOptions, s conversion.Scope) error {
	return autoConvert_api_SupplementalGroupsStrategyOptions_To_v1beta3_SupplementalGroupsStrategyOptions(in, out, s)
}

func autoConvert_v1beta3_TCPSocketAction_To_api_TCPSocketAction(in *TCPSocketAction, out *api.TCPSocketAction, s conversion.Scope) error {
	if err := api.Convert_intstr_IntOrString_To_intstr_IntOrString(&in.Port, &out.Port, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_TCPSocketAction_To_api_TCPSocketAction(in *TCPSocketAction, out *api.TCPSocketAction, s conversion.Scope) error {
	return autoConvert_v1beta3_TCPSocketAction_To_api_TCPSocketAction(in, out, s)
}

func autoConvert_api_TCPSocketAction_To_v1beta3_TCPSocketAction(in *api.TCPSocketAction, out *TCPSocketAction, s conversion.Scope) error {
	if err := api.Convert_intstr_IntOrString_To_intstr_IntOrString(&in.Port, &out.Port, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_TCPSocketAction_To_v1beta3_TCPSocketAction(in *api.TCPSocketAction, out *TCPSocketAction, s conversion.Scope) error {
	return autoConvert_api_TCPSocketAction_To_v1beta3_TCPSocketAction(in, out, s)
}

func autoConvert_v1beta3_TypeMeta_To_unversioned_TypeMeta(in *TypeMeta, out *unversioned.TypeMeta, s conversion.Scope) error {
	out.Kind = in.Kind
	out.APIVersion = in.APIVersion
	return nil
}

func Convert_v1beta3_TypeMeta_To_unversioned_TypeMeta(in *TypeMeta, out *unversioned.TypeMeta, s conversion.Scope) error {
	return autoConvert_v1beta3_TypeMeta_To_unversioned_TypeMeta(in, out, s)
}

func autoConvert_unversioned_TypeMeta_To_v1beta3_TypeMeta(in *unversioned.TypeMeta, out *TypeMeta, s conversion.Scope) error {
	out.Kind = in.Kind
	out.APIVersion = in.APIVersion
	return nil
}

func Convert_unversioned_TypeMeta_To_v1beta3_TypeMeta(in *unversioned.TypeMeta, out *TypeMeta, s conversion.Scope) error {
	return autoConvert_unversioned_TypeMeta_To_v1beta3_TypeMeta(in, out, s)
}

func autoConvert_v1beta3_Volume_To_api_Volume(in *Volume, out *api.Volume, s conversion.Scope) error {
	out.Name = in.Name
	if err := Convert_v1beta3_VolumeSource_To_api_VolumeSource(&in.VolumeSource, &out.VolumeSource, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta3_Volume_To_api_Volume(in *Volume, out *api.Volume, s conversion.Scope) error {
	return autoConvert_v1beta3_Volume_To_api_Volume(in, out, s)
}

func autoConvert_api_Volume_To_v1beta3_Volume(in *api.Volume, out *Volume, s conversion.Scope) error {
	out.Name = in.Name
	if err := Convert_api_VolumeSource_To_v1beta3_VolumeSource(&in.VolumeSource, &out.VolumeSource, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_Volume_To_v1beta3_Volume(in *api.Volume, out *Volume, s conversion.Scope) error {
	return autoConvert_api_Volume_To_v1beta3_Volume(in, out, s)
}

func autoConvert_v1beta3_VolumeMount_To_api_VolumeMount(in *VolumeMount, out *api.VolumeMount, s conversion.Scope) error {
	out.Name = in.Name
	out.ReadOnly = in.ReadOnly
	out.MountPath = in.MountPath
	return nil
}

func Convert_v1beta3_VolumeMount_To_api_VolumeMount(in *VolumeMount, out *api.VolumeMount, s conversion.Scope) error {
	return autoConvert_v1beta3_VolumeMount_To_api_VolumeMount(in, out, s)
}
